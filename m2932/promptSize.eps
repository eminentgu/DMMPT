%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: promptsize.drawio.pdf
%%Creator: Adobe Acrobat 22.1.0
%%For: Eminentgu
%%CreationDate: 2024/4/18, 7:54:04
%%BoundingBox: 0 0 520 262
%%HiResBoundingBox: 0 0 519.1200 261.1200
%%CropBox: 0 0 519.1200 261.1200
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 598 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.425dc87, 2021/10/27-16:20:32        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2024-04-17T23:53:40Z"
   xmp:CreatorTool="diagrams.net"
   xmp:ModifyDate="2024-04-17T23:53:40Z"
   pdf:Producer="pdf-lib (https://github.com/Hopding/pdf-lib)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -261.12 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 261.12 li
519.12 261.12 li
519.12 0 li
cp
clp
0 0 mo
519 0 li
519 260.938 li
0 260.938 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
65.1769 226.433 mo
466.288 226.433 li
466.288 31.0537 li
65.1769 31.0537 li
65.1769 226.433 li
cp
f
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
.575069 lw
2 lc
1 lj
4 ml
[] 0 dsh
true sadj
83.4092 226.433 mo
83.4092 31.0537 li
.362066 .286198 .271122 0 cmyk
@
grestore
.575069 lw
0 lc
1 lj
4 ml
[] 0 dsh
true sadj
83.4092 226.433 mo
83.4092 228.949 li
.92874 .878447 .889433 .798764 cmyk
@
84.9075 235.54 mo
84.5751 236.457 li
81.7671 236.457 li
81.7671 236.326 li
82.593 235.573 83.1745 234.958 83.5114 234.481 cv
83.8484 234.003 84.0168 233.567 84.0168 233.171 cv
84.0168 232.87 83.9244 232.622 83.7394 232.428 cv
83.5545 232.233 83.3332 232.136 83.0756 232.136 cv
82.842 232.136 82.632 232.204 82.4455 232.341 cv
82.2598 232.478 82.1224 232.679 82.0333 232.943 cv
81.903 232.943 li
81.9622 232.511 82.1127 232.179 82.3545 231.947 cv
82.5964 231.715 82.8989 231.599 83.2621 231.599 cv
83.6477 231.599 83.9697 231.723 84.228 231.971 cv
84.4871 232.219 84.6166 232.511 84.6166 232.848 cv
84.6166 233.089 84.5605 233.33 84.4482 233.571 cv
84.2752 233.95 83.9944 234.352 83.6058 234.775 cv
83.0232 235.412 82.6593 235.796 82.514 235.927 cv
83.7563 235.927 li
84.0094 235.927 84.1868 235.917 84.2887 235.899 cv
84.3905 235.88 84.4822 235.842 84.5638 235.785 cv
84.6462 235.727 84.7177 235.646 84.7784 235.54 cv
84.9075 235.54 li
cp
f
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
123.925 226.433 mo
123.925 31.0537 li
.362066 .286198 .271122 0 cmyk
@
grestore
123.925 226.433 mo
123.925 228.949 li
@
122.493 232.603 mo
122.629 232.283 122.8 232.035 123.007 231.861 cv
123.214 231.686 123.472 231.599 123.782 231.599 cv
124.163 231.599 124.455 231.723 124.659 231.971 cv
124.813 232.156 124.89 232.353 124.89 232.564 cv
124.89 232.91 124.673 233.269 124.238 233.639 cv
124.53 233.753 124.752 233.917 124.901 234.13 cv
125.051 234.342 125.126 234.593 125.126 234.881 cv
125.126 235.293 124.995 235.65 124.733 235.951 cv
124.392 236.344 123.897 236.541 123.248 236.541 cv
122.928 236.541 122.709 236.501 122.593 236.422 cv
122.477 236.342 122.419 236.256 122.419 236.166 cv
122.419 236.098 122.447 236.038 122.501 235.986 cv
122.557 235.934 122.623 235.909 122.7 235.909 cv
122.759 235.909 122.819 235.918 122.88 235.937 cv
122.919 235.949 123.009 235.992 123.149 236.066 cv
123.29 236.139 123.387 236.183 123.441 236.197 cv
123.527 236.223 123.62 236.235 123.719 236.235 cv
123.957 236.235 124.164 236.143 124.341 235.958 cv
124.518 235.773 124.606 235.554 124.606 235.302 cv
124.606 235.117 124.565 234.937 124.484 234.762 cv
124.423 234.631 124.356 234.531 124.284 234.463 cv
124.183 234.37 124.045 234.285 123.869 234.209 cv
123.694 234.133 123.515 234.095 123.332 234.095 cv
123.22 234.095 li
123.22 233.989 li
123.405 233.966 123.59 233.899 123.776 233.789 cv
123.963 233.679 124.098 233.547 124.182 233.393 cv
124.266 233.238 124.308 233.069 124.308 232.884 cv
124.308 232.643 124.233 232.448 124.082 232.3 cv
123.931 232.151 123.743 232.076 123.519 232.076 cv
123.156 232.076 122.852 232.271 122.609 232.659 cv
122.493 232.603 li
cp
f
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
164.442 226.433 mo
164.442 31.0537 li
.362066 .286198 .271122 0 cmyk
@
grestore
164.442 226.433 mo
164.442 228.949 li
@
165.989 234.701 mo
165.989 235.2 li
165.35 235.2 li
165.35 236.457 li
164.772 236.457 li
164.772 235.2 li
162.757 235.2 li
162.757 234.751 li
164.965 231.599 li
165.35 231.599 li
165.35 234.701 li
165.989 234.701 li
cp
164.772 234.701 mo
164.772 232.339 li
163.101 234.701 li
164.772 234.701 li
cp
f
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
204.958 226.433 mo
204.958 31.0537 li
.362066 .286198 .271122 0 cmyk
@
grestore
204.958 226.433 mo
204.958 228.949 li
@
206.281 231.697 mo
206.007 232.294 li
204.575 232.294 li
204.263 232.932 li
204.883 233.024 205.374 233.254 205.737 233.624 cv
206.048 233.942 206.204 234.317 206.204 234.747 cv
206.204 234.997 206.153 235.229 206.051 235.443 cv
205.95 235.655 205.822 235.836 205.667 235.986 cv
205.512 236.136 205.341 236.256 205.151 236.348 cv
204.882 236.477 204.606 236.541 204.322 236.541 cv
204.037 236.541 203.829 236.493 203.699 236.396 cv
203.569 236.299 203.505 236.191 203.505 236.074 cv
203.505 236.009 203.531 235.951 203.585 235.901 cv
203.639 235.85 203.707 235.824 203.789 235.824 cv
203.85 235.824 203.904 235.834 203.949 235.852 cv
203.995 235.871 204.072 235.92 204.182 235.997 cv
204.358 236.119 204.536 236.179 204.715 236.179 cv
204.989 236.179 205.23 236.076 205.436 235.869 cv
205.644 235.662 205.748 235.41 205.748 235.112 cv
205.748 234.825 205.655 234.556 205.47 234.307 cv
205.285 234.058 205.03 233.865 204.705 233.73 cv
204.45 233.624 204.102 233.563 203.663 233.547 cv
204.575 231.697 li
206.281 231.697 li
cp
f
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
245.474 226.433 mo
245.474 31.0537 li
.362066 .286198 .271122 0 cmyk
@
grestore
gsave
.48162 0 mo
518.044 0 li
518.044 258.781 li
.48162 258.781 li
cp
eclp
245.474 226.433 mo
245.474 228.949 li
@
246.899 231.599 mo
246.899 231.729 li
246.59 231.759 246.338 231.821 246.142 231.913 cv
245.947 232.006 245.754 232.146 245.563 232.336 cv
245.373 232.525 245.215 232.736 245.09 232.969 cv
244.965 233.202 244.86 233.479 244.776 233.799 cv
245.113 233.568 245.451 233.452 245.79 233.452 cv
246.116 233.452 246.397 233.583 246.636 233.845 cv
246.874 234.107 246.994 234.444 246.994 234.856 cv
246.994 235.254 246.873 235.617 246.632 235.945 cv
246.342 236.342 245.959 236.541 245.481 236.541 cv
245.156 236.541 244.88 236.433 244.653 236.218 cv
244.208 235.799 243.986 235.256 243.986 234.589 cv
243.986 234.164 244.071 233.759 244.242 233.376 cv
244.413 232.992 244.656 232.651 244.973 232.354 cv
245.291 232.057 245.594 231.857 245.884 231.754 cv
246.175 231.651 246.445 231.599 246.696 231.599 cv
246.899 231.599 li
cp
244.716 234.055 mo
244.674 234.371 244.653 234.627 244.653 234.821 cv
244.653 235.046 244.695 235.29 244.778 235.554 cv
244.861 235.817 244.984 236.025 245.147 236.179 cv
245.267 236.289 245.412 236.344 245.583 236.344 cv
245.787 236.344 245.969 236.249 246.129 236.057 cv
246.289 235.864 246.369 235.59 246.369 235.235 cv
246.369 234.835 246.29 234.489 246.13 234.197 cv
245.971 233.904 245.746 233.758 245.453 233.758 cv
245.364 233.758 245.269 233.776 245.168 233.814 cv
245.066 233.851 244.915 233.932 244.716 234.055 cv
cp
f
grestore
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
285.99 226.433 mo
285.99 31.0537 li
.362066 .286198 .271122 0 cmyk
@
grestore
285.99 226.433 mo
285.99 228.949 li
@
284.917 231.697 mo
287.468 231.697 li
287.468 231.83 li
285.881 236.556 li
285.488 236.556 li
286.91 232.27 li
285.601 232.27 li
285.336 232.27 285.148 232.301 285.036 232.364 cv
284.839 232.472 284.681 232.638 284.562 232.863 cv
284.461 232.824 li
284.917 231.697 li
cp
f
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
326.507 226.433 mo
326.507 31.0537 li
.362066 .286198 .271122 0 cmyk
@
grestore
326.507 226.433 mo
326.507 228.949 li
@
326.089 234.06 mo
325.712 233.751 325.469 233.502 325.36 233.315 cv
325.251 233.128 325.197 232.934 325.197 232.732 cv
325.197 232.424 325.316 232.158 325.555 231.935 cv
325.794 231.711 326.111 231.599 326.507 231.599 cv
326.891 231.599 327.2 231.703 327.433 231.911 cv
327.668 232.119 327.785 232.357 327.785 232.623 cv
327.785 232.802 327.721 232.983 327.595 233.168 cv
327.468 233.353 327.205 233.571 326.805 233.821 cv
327.217 234.139 327.49 234.389 327.623 234.572 cv
327.801 234.811 327.889 235.063 327.889 235.327 cv
327.889 235.662 327.762 235.948 327.506 236.185 cv
327.252 236.422 326.917 236.541 326.503 236.541 cv
326.052 236.541 325.699 236.399 325.446 236.116 cv
325.246 235.89 325.145 235.641 325.145 235.372 cv
325.145 235.161 325.216 234.953 325.358 234.746 cv
325.499 234.539 325.743 234.31 326.089 234.06 cv
cp
326.64 233.684 mo
326.921 233.431 327.099 233.232 327.174 233.086 cv
327.249 232.939 327.286 232.773 327.286 232.589 cv
327.286 232.343 327.217 232.15 327.078 232.011 cv
326.94 231.872 326.752 231.802 326.513 231.802 cv
326.275 231.802 326.081 231.872 325.932 232.01 cv
325.782 232.148 325.707 232.309 325.707 232.494 cv
325.707 232.615 325.738 232.737 325.799 232.859 cv
325.861 232.981 325.95 233.096 326.064 233.206 cv
326.64 233.684 li
cp
326.254 234.192 mo
326.06 234.356 325.916 234.535 325.823 234.728 cv
325.729 234.921 325.682 235.13 325.682 235.355 cv
325.682 235.657 325.765 235.898 325.929 236.079 cv
326.094 236.261 326.304 236.351 326.559 236.351 cv
326.812 236.351 327.014 236.28 327.166 236.138 cv
327.319 235.995 327.395 235.821 327.395 235.618 cv
327.395 235.449 327.35 235.298 327.261 235.165 cv
327.095 234.917 326.759 234.593 326.254 234.192 cv
cp
f
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
367.023 226.433 mo
367.023 31.0537 li
.362066 .286198 .271122 0 cmyk
@
grestore
367.023 226.433 mo
367.023 228.949 li
@
365.605 236.556 mo
365.605 236.425 li
365.909 236.421 366.192 236.35 366.455 236.213 cv
366.717 236.076 366.97 235.837 367.214 235.495 cv
367.459 235.153 367.629 234.778 367.725 234.369 cv
367.357 234.605 367.025 234.723 366.729 234.723 cv
366.394 234.723 366.107 234.593 365.868 234.335 cv
365.629 234.077 365.51 233.733 365.51 233.305 cv
365.51 232.888 365.629 232.517 365.868 232.192 cv
366.156 231.797 366.531 231.599 366.995 231.599 cv
367.386 231.599 367.72 231.76 367.999 232.083 cv
368.34 232.484 368.511 232.978 368.511 233.565 cv
368.511 234.093 368.381 234.586 368.121 235.044 cv
367.862 235.501 367.5 235.881 367.037 236.183 cv
366.66 236.431 366.249 236.556 365.805 236.556 cv
365.605 236.556 li
cp
367.781 234.108 mo
367.823 233.804 367.844 233.561 367.844 233.378 cv
367.844 233.151 367.805 232.906 367.728 232.644 cv
367.651 232.38 367.542 232.178 367.4 232.038 cv
367.259 231.897 367.098 231.827 366.917 231.827 cv
366.709 231.827 366.526 231.921 366.369 232.108 cv
366.213 232.295 366.134 232.574 366.134 232.943 cv
366.134 233.437 366.239 233.823 366.448 234.101 cv
366.6 234.303 366.787 234.404 367.009 234.404 cv
367.116 234.404 367.244 234.378 367.391 234.326 cv
367.539 234.274 367.669 234.202 367.781 234.108 cv
cp
f
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
407.539 226.433 mo
407.539 31.0537 li
.362066 .286198 .271122 0 cmyk
@
grestore
407.539 226.433 mo
407.539 228.949 li
@
404.787 232.164 mo
405.945 231.599 li
406.061 231.599 li
406.061 235.618 li
406.061 235.884 406.072 236.051 406.095 236.116 cv
406.117 236.182 406.163 236.232 406.233 236.267 cv
406.303 236.302 406.446 236.322 406.662 236.326 cv
406.662 236.457 li
404.871 236.457 li
404.871 236.326 li
405.096 236.322 405.241 236.303 405.306 236.269 cv
405.372 236.235 405.418 236.189 405.443 236.132 cv
405.469 236.074 405.482 235.903 405.482 235.618 cv
405.482 233.049 li
405.482 232.702 405.471 232.48 405.448 232.382 cv
405.431 232.307 405.401 232.252 405.358 232.217 cv
405.314 232.182 405.262 232.164 405.202 232.164 cv
405.115 232.164 404.994 232.2 404.84 232.273 cv
404.787 232.164 li
cp
f
407.799 234.105 mo
407.799 233.562 407.88 233.095 408.044 232.703 cv
408.208 232.311 408.426 232.019 408.697 231.827 cv
408.908 231.675 409.126 231.599 409.351 231.599 cv
409.715 231.599 410.043 231.785 410.334 232.157 cv
410.696 232.618 410.877 233.243 410.877 234.032 cv
410.877 234.584 410.797 235.053 410.638 235.439 cv
410.479 235.825 410.276 236.105 410.029 236.279 cv
409.783 236.454 409.545 236.541 409.315 236.541 cv
408.861 236.541 408.483 236.273 408.182 235.737 cv
407.926 235.285 407.799 234.741 407.799 234.105 cv
cp
408.487 234.192 mo
408.487 234.848 408.568 235.382 408.729 235.796 cv
408.863 236.145 409.062 236.32 409.326 236.32 cv
409.452 236.32 409.583 236.263 409.718 236.15 cv
409.854 236.036 409.958 235.846 410.028 235.58 cv
410.135 235.177 410.189 234.609 410.189 233.877 cv
410.189 233.334 410.133 232.881 410.02 232.519 cv
409.936 232.249 409.828 232.058 409.694 231.946 cv
409.599 231.869 409.483 231.83 409.346 231.83 cv
409.188 231.83 409.046 231.902 408.922 232.045 cv
408.753 232.239 408.639 232.544 408.578 232.961 cv
408.517 233.378 408.487 233.788 408.487 234.192 cv
cp
f
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
448.055 226.433 mo
448.055 31.0537 li
.362066 .286198 .271122 0 cmyk
@
grestore
gsave
.48162 0 mo
518.044 0 li
518.044 258.781 li
.48162 258.781 li
cp
eclp
448.055 226.433 mo
448.055 228.949 li
@
445.438 232.164 mo
446.596 231.599 li
446.712 231.599 li
446.712 235.618 li
446.712 235.884 446.723 236.051 446.746 236.116 cv
446.768 236.182 446.814 236.232 446.884 236.267 cv
446.954 236.302 447.097 236.322 447.313 236.326 cv
447.313 236.457 li
445.523 236.457 li
445.523 236.326 li
445.747 236.322 445.892 236.303 445.957 236.269 cv
446.023 236.235 446.069 236.189 446.094 236.132 cv
446.12 236.074 446.134 235.903 446.134 235.618 cv
446.134 233.049 li
446.134 232.702 446.122 232.48 446.099 232.382 cv
446.082 232.307 446.052 232.252 446.009 232.217 cv
445.965 232.182 445.913 232.164 445.853 232.164 cv
445.766 232.164 445.645 232.2 445.491 232.273 cv
445.438 232.164 li
cp
f
448.763 232.164 mo
449.921 231.599 li
450.037 231.599 li
450.037 235.618 li
450.037 235.884 450.048 236.051 450.07 236.116 cv
450.093 236.182 450.139 236.232 450.208 236.267 cv
450.279 236.302 450.422 236.322 450.638 236.326 cv
450.638 236.457 li
448.847 236.457 li
448.847 236.326 li
449.072 236.322 449.217 236.303 449.282 236.269 cv
449.348 236.235 449.393 236.189 449.419 236.132 cv
449.445 236.074 449.458 235.903 449.458 235.618 cv
449.458 233.049 li
449.458 232.702 449.447 232.48 449.423 232.382 cv
449.407 232.307 449.377 232.252 449.334 232.217 cv
449.29 232.182 449.238 232.164 449.177 232.164 cv
449.091 232.164 448.97 232.2 448.816 232.273 cv
448.763 232.164 li
cp
f
198.139 250.853 mo
194.46 242.842 li
194.46 249.204 li
194.46 249.788 194.523 250.152 194.651 250.298 cv
194.823 250.494 195.096 250.592 195.47 250.592 cv
195.807 250.592 li
195.807 250.853 li
192.494 250.853 li
192.494 250.592 li
192.831 250.592 li
193.234 250.592 193.52 250.471 193.689 250.228 cv
193.791 250.078 193.842 249.737 193.842 249.204 cv
193.842 242.984 li
193.842 242.563 193.795 242.259 193.703 242.072 cv
193.637 241.935 193.516 241.821 193.341 241.73 cv
193.166 241.639 192.883 241.593 192.494 241.593 cv
192.494 241.332 li
195.19 241.332 li
198.645 248.781 li
202.041 241.332 li
204.737 241.332 li
204.737 241.593 li
204.407 241.593 li
204.001 241.593 203.713 241.715 203.544 241.959 cv
203.441 242.109 203.389 242.45 203.389 242.984 cv
203.389 249.204 li
203.389 249.788 203.455 250.152 203.587 250.298 cv
203.759 250.494 204.032 250.592 204.407 250.592 cv
204.737 250.592 li
204.737 250.853 li
200.693 250.853 li
200.693 250.592 li
201.03 250.592 li
201.438 250.592 201.724 250.471 201.888 250.228 cv
201.99 250.078 202.041 249.737 202.041 249.204 cv
202.041 242.842 li
198.371 250.853 li
198.139 250.853 li
cp
f
211.125 244.421 mo
211.125 248.319 li
211.125 249.063 211.142 249.518 211.176 249.684 cv
211.212 249.851 211.268 249.967 211.345 250.033 cv
211.423 250.097 211.513 250.129 211.617 250.129 cv
211.762 250.129 211.926 250.09 212.108 250.01 cv
212.207 250.255 li
210.282 251.05 li
209.968 251.05 li
209.968 249.687 li
209.415 250.286 208.994 250.663 208.703 250.819 cv
208.414 250.973 208.108 251.05 207.784 251.05 cv
207.423 251.05 207.11 250.946 206.845 250.738 cv
206.582 250.528 206.398 250.26 206.295 249.934 cv
206.193 249.606 206.142 249.142 206.142 248.543 cv
206.142 245.672 li
206.142 245.368 206.109 245.158 206.043 245.041 cv
205.977 244.923 205.88 244.832 205.751 244.769 cv
205.622 244.707 205.39 244.677 205.053 244.682 cv
205.053 244.421 li
207.306 244.421 li
207.306 248.725 li
207.306 249.324 207.41 249.717 207.618 249.905 cv
207.828 250.092 208.079 250.185 208.373 250.185 cv
208.575 250.185 208.803 250.122 209.058 249.997 cv
209.313 249.869 209.616 249.628 209.968 249.273 cv
209.968 245.63 li
209.968 245.264 209.901 245.017 209.768 244.888 cv
209.634 244.76 209.357 244.691 208.934 244.682 cv
208.934 244.421 li
211.125 244.421 li
cp
f
214.887 240.87 mo
214.887 249.399 li
214.887 249.802 214.916 250.069 214.975 250.201 cv
215.035 250.331 215.125 250.43 215.247 250.498 cv
215.368 250.565 215.595 250.599 215.927 250.599 cv
215.927 250.853 li
212.776 250.853 li
212.776 250.599 li
213.071 250.599 213.271 250.569 213.378 250.509 cv
213.485 250.447 213.57 250.347 213.632 250.208 cv
213.693 250.067 213.724 249.798 213.724 249.399 cv
213.724 243.559 li
213.724 242.834 213.707 242.388 213.674 242.222 cv
213.641 242.056 213.588 241.943 213.515 241.883 cv
213.443 241.821 213.351 241.791 213.238 241.791 cv
213.117 241.791 212.963 241.828 212.776 241.903 cv
212.657 241.656 li
214.573 240.87 li
214.887 240.87 li
cp
f
218.538 242.31 mo
218.538 244.421 li
220.041 244.421 li
220.041 244.913 li
218.538 244.913 li
218.538 249.082 li
218.538 249.5 218.598 249.782 218.718 249.927 cv
218.837 250.071 218.991 250.143 219.178 250.143 cv
219.332 250.143 219.482 250.095 219.627 249.999 cv
219.773 249.903 219.885 249.762 219.964 249.574 cv
220.238 249.574 li
220.074 250.033 219.841 250.378 219.542 250.61 cv
219.242 250.842 218.934 250.958 218.616 250.958 cv
218.401 250.958 218.19 250.898 217.983 250.778 cv
217.778 250.659 217.626 250.488 217.527 250.266 cv
217.43 250.045 217.381 249.702 217.381 249.237 cv
217.381 244.913 li
216.363 244.913 li
216.363 244.682 li
216.619 244.578 216.882 244.404 217.152 244.158 cv
217.421 243.913 217.661 243.622 217.871 243.285 cv
217.979 243.106 218.128 242.781 218.32 242.31 cv
218.538 242.31 li
cp
f
222.301 240.87 mo
222.497 240.87 222.664 240.939 222.802 241.079 cv
222.941 241.216 223.011 241.383 223.011 241.58 cv
223.011 241.776 222.941 241.944 222.802 242.085 cv
222.664 242.226 222.497 242.296 222.301 242.296 cv
222.105 242.296 221.936 242.226 221.795 242.085 cv
221.655 241.944 221.584 241.776 221.584 241.58 cv
221.584 241.383 221.653 241.216 221.791 241.079 cv
221.93 240.939 222.1 240.87 222.301 240.87 cv
cp
222.885 244.233 mo
222.885 249.399 li
222.885 249.802 222.914 250.07 222.972 250.203 cv
223.031 250.337 223.117 250.436 223.231 250.502 cv
223.346 250.567 223.556 250.599 223.86 250.599 cv
223.86 250.853 li
220.735 250.853 li
220.735 250.599 li
221.05 250.599 221.26 250.569 221.366 250.509 cv
221.474 250.447 221.559 250.347 221.622 250.208 cv
221.687 250.067 221.719 249.798 221.719 249.399 cv
221.719 246.921 li
221.719 246.224 221.698 245.772 221.656 245.567 cv
221.623 245.417 221.571 245.313 221.501 245.255 cv
221.431 245.196 221.335 245.167 221.214 245.167 cv
221.082 245.167 220.922 245.202 220.735 245.273 cv
220.638 245.019 li
222.575 244.233 li
222.885 244.233 li
cp
f
224.792 247.097 mo
228.422 247.097 li
228.422 248.157 li
224.792 248.157 li
224.792 247.097 li
cp
f
231.357 245.601 mo
231.825 245.133 232.102 244.865 232.186 244.794 cv
232.395 244.616 232.621 244.478 232.864 244.381 cv
233.108 244.282 233.35 244.233 233.59 244.233 cv
233.992 244.233 234.338 244.35 234.627 244.585 cv
234.918 244.819 235.113 245.157 235.211 245.601 cv
235.694 245.039 236.1 244.671 236.431 244.495 cv
236.764 244.32 237.106 244.233 237.458 244.233 cv
237.799 244.233 238.102 244.32 238.365 244.495 cv
238.63 244.671 238.84 244.957 238.994 245.356 cv
239.098 245.627 239.149 246.053 239.149 246.634 cv
239.149 249.399 li
239.149 249.802 239.179 250.078 239.239 250.228 cv
239.287 250.331 239.374 250.419 239.5 250.491 cv
239.626 250.563 239.831 250.599 240.118 250.599 cv
240.118 250.853 li
236.946 250.853 li
236.946 250.599 li
237.078 250.599 li
237.354 250.599 237.569 250.546 237.723 250.439 cv
237.831 250.364 237.909 250.245 237.957 250.08 cv
237.975 250 237.984 249.774 237.984 249.399 cv
237.984 246.634 li
237.984 246.11 237.921 245.74 237.795 245.524 cv
237.612 245.225 237.319 245.075 236.916 245.075 cv
236.668 245.075 236.419 245.137 236.168 245.261 cv
235.918 245.386 235.616 245.616 235.261 245.953 cv
235.245 246.03 li
235.261 246.331 li
235.261 249.399 li
235.261 249.839 235.285 250.113 235.333 250.221 cv
235.382 250.329 235.474 250.419 235.609 250.491 cv
235.745 250.563 235.977 250.599 236.305 250.599 cv
236.305 250.853 li
233.055 250.853 li
233.055 250.599 li
233.411 250.599 233.656 250.557 233.79 250.473 cv
233.923 250.389 234.015 250.263 234.066 250.093 cv
234.09 250.014 234.102 249.783 234.102 249.399 cv
234.102 246.634 li
234.102 246.11 234.025 245.733 233.87 245.504 cv
233.664 245.204 233.375 245.055 233.006 245.055 cv
232.754 245.055 232.504 245.122 232.255 245.257 cv
231.867 245.464 231.568 245.696 231.357 245.953 cv
231.357 249.399 li
231.357 249.82 231.386 250.094 231.444 250.221 cv
231.503 250.347 231.589 250.441 231.703 250.504 cv
231.818 250.567 232.052 250.599 232.404 250.599 cv
232.404 250.853 li
229.223 250.853 li
229.223 250.599 li
229.518 250.599 229.724 250.567 229.84 250.504 cv
229.957 250.441 230.046 250.341 230.105 250.203 cv
230.167 250.066 230.198 249.798 230.198 249.399 cv
230.198 246.942 li
230.198 246.235 230.177 245.779 230.135 245.574 cv
230.102 245.419 230.05 245.313 229.98 245.255 cv
229.911 245.196 229.815 245.167 229.692 245.167 cv
229.562 245.167 229.405 245.202 229.223 245.273 cv
229.117 245.019 li
231.056 244.233 li
231.357 244.233 li
231.357 245.601 li
cp
f
243.775 244.233 mo
244.748 244.233 245.53 244.602 246.12 245.342 cv
246.62 245.974 246.87 246.7 246.87 247.519 cv
246.87 248.094 246.732 248.677 246.455 249.267 cv
246.179 249.855 245.8 250.3 245.316 250.601 cv
244.832 250.9 244.293 251.05 243.699 251.05 cv
242.73 251.05 241.96 250.664 241.389 249.891 cv
240.907 249.24 240.666 248.51 240.666 247.701 cv
240.666 247.111 240.812 246.525 241.104 245.942 cv
241.396 245.359 241.781 244.929 242.259 244.65 cv
242.736 244.372 243.242 244.233 243.775 244.233 cv
cp
243.557 244.689 mo
243.31 244.689 243.061 244.763 242.809 244.911 cv
242.559 245.058 242.357 245.316 242.202 245.686 cv
242.048 246.056 241.971 246.531 241.971 247.11 cv
241.971 248.046 242.157 248.854 242.528 249.534 cv
242.901 250.212 243.392 250.552 244 250.552 cv
244.453 250.552 244.828 250.364 245.123 249.99 cv
245.418 249.616 245.565 248.972 245.565 248.058 cv
245.565 246.917 245.32 246.018 244.828 245.362 cv
244.496 244.913 244.072 244.689 243.557 244.689 cv
cp
f
252.36 250.129 mo
252.048 250.457 251.741 250.693 251.442 250.837 cv
251.142 250.979 250.819 251.05 250.471 251.05 cv
249.77 251.05 249.158 250.757 248.634 250.17 cv
248.11 249.581 247.848 248.826 247.848 247.903 cv
247.848 246.982 248.137 246.139 248.717 245.374 cv
249.298 244.608 250.044 244.226 250.957 244.226 cv
251.523 244.226 251.991 244.406 252.36 244.767 cv
252.36 243.579 li
252.36 242.845 252.343 242.394 252.307 242.227 cv
252.272 242.057 252.217 241.943 252.143 241.883 cv
252.068 241.821 251.974 241.791 251.862 241.791 cv
251.741 241.791 251.579 241.828 251.377 241.903 cv
251.287 241.656 li
253.203 240.87 li
253.52 240.87 li
253.52 248.305 li
253.52 249.058 253.537 249.518 253.571 249.684 cv
253.606 249.851 253.662 249.967 253.74 250.033 cv
253.818 250.097 253.907 250.129 254.009 250.129 cv
254.137 250.129 254.305 250.09 254.515 250.01 cv
254.593 250.255 li
252.684 251.05 li
252.36 251.05 li
252.36 250.129 li
cp
252.36 249.637 mo
252.36 246.324 li
252.332 246.006 252.247 245.717 252.107 245.455 cv
251.967 245.192 251.782 244.995 251.55 244.862 cv
251.317 244.728 251.091 244.662 250.871 244.662 cv
250.459 244.662 250.092 244.847 249.77 245.216 cv
249.344 245.703 249.13 246.414 249.13 247.35 cv
249.13 248.295 249.336 249.02 249.748 249.523 cv
250.16 250.026 250.619 250.277 251.125 250.277 cv
251.55 250.277 251.962 250.064 252.36 249.637 cv
cp
f
258.65 249.925 mo
257.99 250.435 257.576 250.73 257.408 250.81 cv
257.155 250.927 256.885 250.985 256.599 250.985 cv
256.156 250.985 255.79 250.833 255.501 250.529 cv
255.213 250.225 255.07 249.825 255.07 249.33 cv
255.07 249.015 255.14 248.743 255.281 248.514 cv
255.472 248.197 255.806 247.898 256.28 247.618 cv
256.755 247.336 257.545 246.994 258.65 246.591 cv
258.65 246.34 li
258.65 245.697 258.548 245.257 258.345 245.019 cv
258.141 244.781 257.845 244.662 257.457 244.662 cv
257.162 244.662 256.928 244.741 256.754 244.9 cv
256.576 245.058 256.487 245.241 256.487 245.448 cv
256.503 245.854 li
256.503 246.07 256.447 246.236 256.337 246.353 cv
256.227 246.47 256.083 246.528 255.905 246.528 cv
255.732 246.528 255.59 246.468 255.481 246.346 cv
255.371 246.224 255.317 246.057 255.317 245.848 cv
255.317 245.445 255.523 245.075 255.934 244.738 cv
256.346 244.401 256.924 244.233 257.666 244.233 cv
258.238 244.233 258.706 244.328 259.07 244.52 cv
259.347 244.665 259.551 244.892 259.681 245.201 cv
259.767 245.403 259.809 245.815 259.809 246.436 cv
259.809 248.62 li
259.809 249.234 259.821 249.61 259.843 249.747 cv
259.867 249.885 259.906 249.977 259.96 250.024 cv
260.014 250.07 260.076 250.093 260.146 250.093 cv
260.221 250.093 260.286 250.078 260.342 250.046 cv
260.441 249.985 260.63 249.813 260.91 249.532 cv
260.91 249.925 li
260.386 250.627 259.885 250.978 259.407 250.978 cv
259.178 250.978 258.995 250.899 258.859 250.74 cv
258.724 250.581 258.655 250.31 258.65 249.925 cv
cp
258.65 249.469 mo
258.65 247.02 li
257.943 247.3 257.487 247.499 257.282 247.616 cv
256.912 247.822 256.647 248.038 256.487 248.262 cv
256.328 248.487 256.249 248.733 256.249 248.999 cv
256.249 249.336 256.349 249.616 256.55 249.839 cv
256.752 250.061 256.984 250.172 257.246 250.172 cv
257.601 250.172 258.069 249.938 258.65 249.469 cv
cp
f
263.598 240.87 mo
263.598 249.399 li
263.598 249.802 263.627 250.069 263.686 250.201 cv
263.746 250.331 263.836 250.43 263.958 250.498 cv
264.079 250.565 264.306 250.599 264.638 250.599 cv
264.638 250.853 li
261.487 250.853 li
261.487 250.599 li
261.782 250.599 261.982 250.569 262.089 250.509 cv
262.196 250.447 262.281 250.347 262.342 250.208 cv
262.404 250.067 262.435 249.798 262.435 249.399 cv
262.435 243.559 li
262.435 242.834 262.418 242.388 262.385 242.222 cv
262.352 242.056 262.299 241.943 262.226 241.883 cv
262.154 241.821 262.062 241.791 261.949 241.791 cv
261.828 241.791 261.674 241.828 261.487 241.903 cv
261.368 241.656 li
263.284 240.87 li
263.598 240.87 li
cp
f
271.476 246.396 mo
271.476 249.168 li
271.476 249.767 271.542 250.139 271.672 250.284 cv
271.85 250.489 272.119 250.592 272.478 250.592 cv
272.845 250.592 li
272.845 250.853 li
268.765 250.853 li
268.765 250.592 li
269.125 250.592 li
269.526 250.592 269.813 250.461 269.987 250.199 cv
270.081 250.054 270.129 249.71 270.129 249.168 cv
270.129 243.017 li
270.129 242.418 270.065 242.047 269.938 241.903 cv
269.755 241.696 269.484 241.593 269.125 241.593 cv
268.765 241.593 li
268.765 241.332 li
272.254 241.332 li
273.106 241.332 273.778 241.421 274.269 241.598 cv
274.76 241.773 275.174 242.069 275.511 242.485 cv
275.848 242.901 276.016 243.395 276.016 243.965 cv
276.016 244.742 275.76 245.374 275.248 245.861 cv
274.736 246.348 274.012 246.591 273.076 246.591 cv
272.847 246.591 272.599 246.575 272.332 246.542 cv
272.066 246.509 271.78 246.46 271.476 246.396 cv
cp
271.476 245.994 mo
271.724 246.042 271.943 246.078 272.135 246.102 cv
272.326 246.124 272.49 246.135 272.627 246.135 cv
273.113 246.135 273.533 245.947 273.887 245.571 cv
274.24 245.194 274.417 244.706 274.417 244.107 cv
274.417 243.695 274.332 243.312 274.163 242.959 cv
273.995 242.605 273.757 242.341 273.447 242.166 cv
273.138 241.991 272.788 241.903 272.395 241.903 cv
272.157 241.903 271.851 241.947 271.476 242.036 cv
271.476 245.994 li
cp
f
278.854 244.233 mo
278.854 245.679 li
279.392 244.715 279.944 244.233 280.51 244.233 cv
280.768 244.233 280.98 244.311 281.148 244.468 cv
281.317 244.624 281.402 244.805 281.402 245.012 cv
281.402 245.195 281.34 245.35 281.218 245.477 cv
281.096 245.603 280.952 245.666 280.784 245.666 cv
280.621 245.666 280.437 245.585 280.234 245.423 cv
280.03 245.261 279.879 245.18 279.78 245.18 cv
279.696 245.18 279.605 245.227 279.506 245.32 cv
279.296 245.513 279.079 245.829 278.854 246.268 cv
278.854 249.35 li
278.854 249.706 278.899 249.976 278.987 250.158 cv
279.048 250.284 279.156 250.389 279.31 250.473 cv
279.465 250.557 279.687 250.599 279.978 250.599 cv
279.978 250.853 li
276.684 250.853 li
276.684 250.599 li
277.012 250.599 277.256 250.548 277.414 250.446 cv
277.531 250.371 277.613 250.251 277.659 250.087 cv
277.683 250.007 277.695 249.78 277.695 249.406 cv
277.695 246.915 li
277.695 246.166 277.68 245.72 277.648 245.578 cv
277.618 245.434 277.562 245.33 277.48 245.266 cv
277.399 245.2 277.298 245.167 277.176 245.167 cv
277.031 245.167 276.867 245.202 276.684 245.273 cv
276.615 245.019 li
278.558 244.233 li
278.854 244.233 li
cp
f
284.904 244.233 mo
285.878 244.233 286.66 244.602 287.25 245.342 cv
287.75 245.974 288 246.7 288 247.519 cv
288 248.094 287.861 248.677 287.584 249.267 cv
287.309 249.855 286.929 250.3 286.445 250.601 cv
285.962 250.9 285.423 251.05 284.828 251.05 cv
283.859 251.05 283.089 250.664 282.519 249.891 cv
282.037 249.24 281.795 248.51 281.795 247.701 cv
281.795 247.111 281.941 246.525 282.233 245.942 cv
282.526 245.359 282.91 244.929 283.388 244.65 cv
283.866 244.372 284.371 244.233 284.904 244.233 cv
cp
284.686 244.689 mo
284.439 244.689 284.19 244.763 283.938 244.911 cv
283.688 245.058 283.486 245.316 283.332 245.686 cv
283.178 246.056 283.101 246.531 283.101 247.11 cv
283.101 248.046 283.286 248.854 283.658 249.534 cv
284.031 250.212 284.521 250.552 285.129 250.552 cv
285.583 250.552 285.957 250.364 286.252 249.99 cv
286.547 249.616 286.695 248.972 286.695 248.058 cv
286.695 246.917 286.449 246.018 285.958 245.362 cv
285.625 244.913 285.202 244.689 284.686 244.689 cv
cp
f
290.857 245.601 mo
291.326 245.133 291.602 244.865 291.686 244.794 cv
291.896 244.616 292.122 244.478 292.365 244.381 cv
292.609 244.282 292.851 244.233 293.09 244.233 cv
293.493 244.233 293.839 244.35 294.128 244.585 cv
294.418 244.819 294.613 245.157 294.712 245.601 cv
295.194 245.039 295.601 244.671 295.932 244.495 cv
296.264 244.32 296.606 244.233 296.958 244.233 cv
297.3 244.233 297.602 244.32 297.866 244.495 cv
298.131 244.671 298.341 244.957 298.495 245.356 cv
298.598 245.627 298.65 246.053 298.65 246.634 cv
298.65 249.399 li
298.65 249.802 298.68 250.078 298.74 250.228 cv
298.788 250.331 298.875 250.419 299 250.491 cv
299.126 250.563 299.332 250.599 299.618 250.599 cv
299.618 250.853 li
296.446 250.853 li
296.446 250.599 li
296.579 250.599 li
296.854 250.599 297.069 250.546 297.223 250.439 cv
297.331 250.364 297.409 250.245 297.457 250.08 cv
297.475 250 297.484 249.774 297.484 249.399 cv
297.484 246.634 li
297.484 246.11 297.421 245.74 297.295 245.524 cv
297.113 245.225 296.82 245.075 296.417 245.075 cv
296.168 245.075 295.919 245.137 295.669 245.261 cv
295.419 245.386 295.116 245.616 294.761 245.953 cv
294.746 246.03 li
294.761 246.331 li
294.761 249.399 li
294.761 249.839 294.785 250.113 294.833 250.221 cv
294.883 250.329 294.975 250.419 295.11 250.491 cv
295.246 250.563 295.478 250.599 295.806 250.599 cv
295.806 250.853 li
292.555 250.853 li
292.555 250.599 li
292.912 250.599 293.157 250.557 293.29 250.473 cv
293.423 250.389 293.515 250.263 293.566 250.093 cv
293.59 250.014 293.602 249.783 293.602 249.399 cv
293.602 246.634 li
293.602 246.11 293.525 245.733 293.371 245.504 cv
293.164 245.204 292.876 245.055 292.506 245.055 cv
292.254 245.055 292.004 245.122 291.756 245.257 cv
291.368 245.464 291.068 245.696 290.857 245.953 cv
290.857 249.399 li
290.857 249.82 290.886 250.094 290.945 250.221 cv
291.003 250.347 291.089 250.441 291.203 250.504 cv
291.318 250.567 291.552 250.599 291.904 250.599 cv
291.904 250.853 li
288.723 250.853 li
288.723 250.599 li
289.018 250.599 289.224 250.567 289.341 250.504 cv
289.458 250.441 289.546 250.341 289.606 250.203 cv
289.667 250.066 289.698 249.798 289.698 249.399 cv
289.698 246.942 li
289.698 246.235 289.677 245.779 289.635 245.574 cv
289.602 245.419 289.551 245.313 289.48 245.255 cv
289.411 245.196 289.315 245.167 289.193 245.167 cv
289.062 245.167 288.906 245.202 288.723 245.273 cv
288.618 245.019 li
290.556 244.233 li
290.857 244.233 li
290.857 245.601 li
cp
f
299.668 245.061 mo
301.647 244.262 li
301.914 244.262 li
301.914 245.762 li
302.247 245.196 302.58 244.8 302.914 244.574 cv
303.249 244.346 303.601 244.233 303.97 244.233 cv
304.616 244.233 305.155 244.486 305.585 244.992 cv
306.113 245.609 306.378 246.414 306.378 247.407 cv
306.378 248.515 306.059 249.432 305.423 250.158 cv
304.899 250.753 304.239 251.05 303.444 251.05 cv
303.098 251.05 302.798 251.001 302.545 250.902 cv
302.358 250.832 302.148 250.691 301.914 250.48 cv
301.914 252.439 li
301.914 252.879 301.941 253.158 301.995 253.276 cv
302.049 253.396 302.143 253.491 302.276 253.562 cv
302.409 253.632 302.651 253.667 303.001 253.667 cv
303.001 253.928 li
299.632 253.928 li
299.632 253.667 li
299.807 253.667 li
300.065 253.672 300.285 253.623 300.467 253.521 cv
300.556 253.469 300.625 253.385 300.674 253.27 cv
300.724 253.156 300.748 252.865 300.748 252.398 cv
300.748 246.317 li
300.748 245.901 300.73 245.637 300.692 245.524 cv
300.655 245.412 300.595 245.328 300.512 245.273 cv
300.432 245.216 300.321 245.187 300.18 245.187 cv
300.068 245.187 299.925 245.22 299.751 245.286 cv
299.668 245.061 li
cp
301.914 246.178 mo
301.914 248.577 li
301.914 249.097 301.935 249.439 301.977 249.604 cv
302.043 249.875 302.203 250.113 302.458 250.32 cv
302.712 250.525 303.034 250.628 303.424 250.628 cv
303.891 250.628 304.27 250.445 304.56 250.08 cv
304.939 249.602 305.129 248.93 305.129 248.065 cv
305.129 247.082 304.914 246.327 304.484 245.798 cv
304.184 245.433 303.829 245.25 303.417 245.25 cv
303.192 245.25 302.97 245.306 302.75 245.419 cv
302.581 245.502 302.302 245.756 301.914 246.178 cv
cp
f
309.186 242.31 mo
309.186 244.421 li
310.688 244.421 li
310.688 244.913 li
309.186 244.913 li
309.186 249.082 li
309.186 249.5 309.246 249.782 309.365 249.927 cv
309.485 250.071 309.639 250.143 309.826 250.143 cv
309.98 250.143 310.13 250.095 310.275 249.999 cv
310.42 249.903 310.533 249.762 310.612 249.574 cv
310.886 249.574 li
310.721 250.033 310.489 250.378 310.19 250.61 cv
309.89 250.842 309.582 250.958 309.264 250.958 cv
309.049 250.958 308.837 250.898 308.631 250.778 cv
308.426 250.659 308.274 250.488 308.175 250.266 cv
308.077 250.045 308.029 249.702 308.029 249.237 cv
308.029 244.913 li
307.011 244.913 li
307.011 244.682 li
307.267 244.578 307.53 244.404 307.8 244.158 cv
308.069 243.913 308.309 243.622 308.518 243.285 cv
308.626 243.106 308.776 242.781 308.968 242.31 cv
309.186 242.31 li
cp
f
321.049 241.117 mo
321.049 244.408 li
320.791 244.408 li
320.707 243.776 320.555 243.273 320.337 242.898 cv
320.12 242.524 319.81 242.227 319.407 242.009 cv
319.004 241.788 318.588 241.678 318.158 241.678 cv
317.671 241.678 317.268 241.827 316.949 242.123 cv
316.632 242.42 316.473 242.758 316.473 243.139 cv
316.473 243.428 316.573 243.692 316.774 243.932 cv
317.065 244.282 317.755 244.75 318.845 245.336 cv
319.735 245.812 320.342 246.178 320.667 246.434 cv
320.992 246.689 321.242 246.99 321.417 247.337 cv
321.594 247.683 321.682 248.045 321.682 248.424 cv
321.682 249.145 321.402 249.766 320.842 250.289 cv
320.284 250.81 319.564 251.07 318.684 251.07 cv
318.408 251.07 318.148 251.049 317.904 251.008 cv
317.76 250.984 317.46 250.898 317.003 250.751 cv
316.547 250.603 316.257 250.529 316.136 250.529 cv
316.019 250.529 315.926 250.564 315.858 250.635 cv
315.79 250.705 315.74 250.85 315.707 251.07 cv
315.449 251.07 li
315.449 247.806 li
315.707 247.806 li
315.83 248.489 315.994 249.001 316.199 249.341 cv
316.406 249.679 316.72 249.961 317.143 250.185 cv
317.566 250.41 318.031 250.522 318.538 250.522 cv
319.122 250.522 319.583 250.368 319.921 250.06 cv
320.261 249.751 320.431 249.386 320.431 248.963 cv
320.431 248.73 320.367 248.494 320.238 248.256 cv
320.111 248.016 319.911 247.794 319.638 247.589 cv
319.456 247.448 318.957 247.15 318.142 246.695 cv
317.329 246.238 316.75 245.874 316.406 245.603 cv
316.063 245.33 315.802 245.031 315.624 244.704 cv
315.446 244.376 315.357 244.015 315.357 243.622 cv
315.357 242.939 315.619 242.351 316.143 241.858 cv
316.667 241.364 317.334 241.117 318.144 241.117 cv
318.649 241.117 319.184 241.24 319.751 241.487 cv
320.013 241.604 320.198 241.663 320.305 241.663 cv
320.427 241.663 320.526 241.627 320.604 241.555 cv
320.682 241.481 320.744 241.335 320.791 241.117 cv
321.049 241.117 li
cp
f
324.538 240.87 mo
324.735 240.87 324.902 240.939 325.039 241.079 cv
325.179 241.216 325.248 241.383 325.248 241.58 cv
325.248 241.776 325.179 241.944 325.039 242.085 cv
324.902 242.226 324.735 242.296 324.538 242.296 cv
324.342 242.296 324.174 242.226 324.033 242.085 cv
323.892 241.944 323.822 241.776 323.822 241.58 cv
323.822 241.383 323.891 241.216 324.028 241.079 cv
324.168 240.939 324.338 240.87 324.538 240.87 cv
cp
325.122 244.233 mo
325.122 249.399 li
325.122 249.802 325.152 250.07 325.21 250.203 cv
325.268 250.337 325.355 250.436 325.468 250.502 cv
325.584 250.567 325.793 250.599 326.097 250.599 cv
326.097 250.853 li
322.973 250.853 li
322.973 250.599 li
323.287 250.599 323.498 250.569 323.604 250.509 cv
323.712 250.447 323.797 250.347 323.86 250.208 cv
323.924 250.067 323.957 249.798 323.957 249.399 cv
323.957 246.921 li
323.957 246.224 323.936 245.772 323.894 245.567 cv
323.861 245.417 323.809 245.313 323.739 245.255 cv
323.668 245.196 323.572 245.167 323.451 245.167 cv
323.319 245.167 323.16 245.202 322.973 245.273 cv
322.876 245.019 li
324.812 244.233 li
325.122 244.233 li
cp
f
332.486 248.88 mo
332.408 250.853 li
326.736 250.853 li
326.736 250.599 li
331.004 244.913 li
328.899 244.913 li
328.445 244.913 328.148 244.942 328.007 245.001 cv
327.866 245.059 327.752 245.171 327.663 245.336 cv
327.536 245.569 327.463 245.859 327.445 246.205 cv
327.165 246.205 li
327.207 244.421 li
332.599 244.421 li
332.599 244.682 li
328.288 250.383 li
330.633 250.383 li
331.124 250.383 331.457 250.342 331.633 250.26 cv
331.808 250.177 331.949 250.033 332.057 249.828 cv
332.132 249.678 332.195 249.362 332.246 248.88 cv
332.486 248.88 li
cp
f
334.359 246.845 mo
334.354 247.799 334.587 248.548 335.055 249.091 cv
335.523 249.634 336.072 249.905 336.704 249.905 cv
337.125 249.905 337.491 249.789 337.803 249.559 cv
338.114 249.327 338.375 248.93 338.587 248.368 cv
338.802 248.507 li
338.705 249.148 338.42 249.732 337.946 250.26 cv
337.475 250.787 336.883 251.05 336.172 251.05 cv
335.399 251.05 334.738 250.749 334.188 250.147 cv
333.639 249.545 333.364 248.736 333.364 247.721 cv
333.364 246.622 333.645 245.765 334.208 245.149 cv
334.773 244.534 335.481 244.226 336.331 244.226 cv
337.053 244.226 337.645 244.463 338.108 244.938 cv
338.571 245.413 338.802 246.048 338.802 246.845 cv
334.359 246.845 li
cp
334.359 246.436 mo
337.335 246.436 li
337.313 246.024 337.264 245.735 337.189 245.567 cv
337.073 245.305 336.898 245.099 336.666 244.949 cv
336.434 244.799 336.191 244.724 335.938 244.724 cv
335.55 244.724 335.203 244.876 334.896 245.178 cv
334.59 245.479 334.411 245.899 334.359 246.436 cv
cp
f
grestore
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
65.1769 226.433 mo
466.288 226.433 li
.362066 .286198 .271122 0 cmyk
@
grestore
gsave
.48162 0 mo
518.044 0 li
518.044 258.781 li
.48162 258.781 li
cp
eclp
65.1769 226.433 mo
62.661 226.433 li
@
44.2307 226.577 mo
44.2307 226.034 44.3127 225.567 44.4767 225.176 cv
44.6406 224.783 44.8582 224.491 45.1292 224.299 cv
45.3404 224.147 45.5583 224.071 45.7829 224.071 cv
46.1476 224.071 46.4752 224.258 46.7657 224.63 cv
47.1281 225.09 47.3093 225.715 47.3093 226.504 cv
47.3093 227.056 47.2296 227.525 47.0701 227.912 cv
46.9113 228.297 46.7084 228.577 46.4613 228.752 cv
46.215 228.926 45.9768 229.013 45.747 229.013 cv
45.2932 229.013 44.9154 228.745 44.6137 228.209 cv
44.3583 227.758 44.2307 227.214 44.2307 226.577 cv
cp
44.9192 226.665 mo
44.9192 227.32 44.9997 227.855 45.1607 228.269 cv
45.2947 228.618 45.4939 228.792 45.7582 228.792 cv
45.884 228.792 46.0147 228.736 46.1502 228.623 cv
46.2865 228.509 46.3898 228.319 46.4602 228.052 cv
46.5673 227.649 46.6208 227.082 46.6208 226.349 cv
46.6208 225.806 46.5646 225.354 46.4523 224.991 cv
46.3685 224.722 46.2599 224.531 46.1266 224.418 cv
46.0308 224.341 45.9147 224.303 45.7784 224.303 cv
45.6197 224.303 45.4782 224.374 45.3539 224.517 cv
45.1854 224.711 45.0708 225.017 45.0102 225.434 cv
44.9495 225.85 44.9192 226.261 44.9192 226.665 cv
cp
f
48.464 228.249 mo
48.574 228.249 48.6665 228.287 48.7414 228.363 cv
48.8163 228.439 48.8537 228.53 48.8537 228.638 cv
48.8537 228.745 48.8155 228.837 48.7391 228.913 cv
48.6635 228.99 48.5718 229.028 48.464 229.028 cv
48.3561 229.028 48.264 228.99 48.1876 228.913 cv
48.112 228.837 48.0742 228.745 48.0742 228.638 cv
48.0742 228.528 48.112 228.436 48.1876 228.361 cv
48.264 228.286 48.3561 228.249 48.464 228.249 cv
cp
f
50.7418 226.532 mo
50.3651 226.223 50.1221 225.975 50.0128 225.788 cv
49.9042 225.6 49.85 225.406 49.85 225.205 cv
49.85 224.896 49.9694 224.63 50.2083 224.407 cv
50.4471 224.183 50.7642 224.071 51.1596 224.071 cv
51.5437 224.071 51.8526 224.176 52.0862 224.384 cv
52.3206 224.592 52.4378 224.829 52.4378 225.096 cv
52.4378 225.274 52.3745 225.456 52.248 225.641 cv
52.1214 225.825 51.8582 226.043 51.4584 226.293 cv
51.8702 226.611 52.1427 226.862 52.276 227.044 cv
52.4535 227.283 52.5422 227.535 52.5422 227.799 cv
52.5422 228.134 52.4146 228.42 52.1592 228.657 cv
51.9046 228.895 51.5703 229.013 51.1562 229.013 cv
50.7047 229.013 50.3524 228.872 50.0993 228.589 cv
49.8986 228.362 49.7983 228.114 49.7983 227.844 cv
49.7983 227.634 49.8691 227.425 50.0106 227.219 cv
50.1521 227.011 50.3958 226.782 50.7418 226.532 cv
cp
51.2932 226.156 mo
51.574 225.904 51.7519 225.705 51.8268 225.559 cv
51.9016 225.412 51.9391 225.246 51.9391 225.061 cv
51.9391 224.815 51.8698 224.623 51.7313 224.484 cv
51.5935 224.344 51.4052 224.275 51.1663 224.275 cv
50.9282 224.275 50.7343 224.344 50.5845 224.483 cv
50.4348 224.62 50.3599 224.782 50.3599 224.967 cv
50.3599 225.088 50.3906 225.21 50.452 225.332 cv
50.5141 225.453 50.6025 225.569 50.7171 225.679 cv
51.2932 226.156 li
cp
50.9069 226.665 mo
50.7129 226.829 50.5692 227.007 50.4756 227.201 cv
50.382 227.394 50.3352 227.603 50.3352 227.827 cv
50.3352 228.129 50.4175 228.371 50.5823 228.552 cv
50.747 228.733 50.957 228.824 51.2124 228.824 cv
51.4647 228.824 51.6669 228.752 51.8189 228.61 cv
51.9716 228.467 52.048 228.294 52.048 228.09 cv
52.048 227.922 52.0035 227.771 51.9144 227.638 cv
51.7481 227.39 51.4123 227.065 50.9069 226.665 cv
cp
f
54.3359 226.532 mo
53.9593 226.223 53.7163 225.975 53.607 225.788 cv
53.4984 225.6 53.4441 225.406 53.4441 225.205 cv
53.4441 224.896 53.5636 224.63 53.8024 224.407 cv
54.0413 224.183 54.3584 224.071 54.7538 224.071 cv
55.1379 224.071 55.4468 224.176 55.6804 224.384 cv
55.9148 224.592 56.032 224.829 56.032 225.096 cv
56.032 225.274 55.9687 225.456 55.8421 225.641 cv
55.7156 225.825 55.4524 226.043 55.0525 226.293 cv
55.4644 226.611 55.7369 226.862 55.8702 227.044 cv
56.0477 227.283 56.1364 227.535 56.1364 227.799 cv
56.1364 228.134 56.0087 228.42 55.7534 228.657 cv
55.4988 228.895 55.1645 229.013 54.7504 229.013 cv
54.2989 229.013 53.9466 228.872 53.6935 228.589 cv
53.4928 228.362 53.3925 228.114 53.3925 227.844 cv
53.3925 227.634 53.4632 227.425 53.6048 227.219 cv
53.7463 227.011 53.99 226.782 54.3359 226.532 cv
cp
54.8874 226.156 mo
55.1682 225.904 55.3461 225.705 55.4209 225.559 cv
55.4958 225.412 55.5333 225.246 55.5333 225.061 cv
55.5333 224.815 55.464 224.623 55.3255 224.484 cv
55.1877 224.344 54.9994 224.275 54.7605 224.275 cv
54.5224 224.275 54.3285 224.344 54.1787 224.483 cv
54.0289 224.62 53.9541 224.782 53.9541 224.967 cv
53.9541 225.088 53.9848 225.21 54.0462 225.332 cv
54.1083 225.453 54.1967 225.569 54.3112 225.679 cv
54.8874 226.156 li
cp
54.5011 226.665 mo
54.3071 226.829 54.1634 227.007 54.0698 227.201 cv
53.9762 227.394 53.9294 227.603 53.9294 227.827 cv
53.9294 228.129 54.0117 228.371 54.1765 228.552 cv
54.3412 228.733 54.5512 228.824 54.8066 228.824 cv
55.0589 228.824 55.2611 228.752 55.4131 228.61 cv
55.5658 228.467 55.6422 228.294 55.6422 228.09 cv
55.6422 227.922 55.5977 227.771 55.5086 227.638 cv
55.3423 227.39 55.0065 227.065 54.5011 226.665 cv
cp
f
56.8103 226.577 mo
56.8103 226.034 56.8923 225.567 57.0563 225.176 cv
57.2203 224.783 57.4378 224.491 57.7089 224.299 cv
57.92 224.147 58.1379 224.071 58.3626 224.071 cv
58.7272 224.071 59.0548 224.258 59.3453 224.63 cv
59.7078 225.09 59.889 225.715 59.889 226.504 cv
59.889 227.056 59.8092 227.525 59.6497 227.912 cv
59.491 228.297 59.2881 228.577 59.041 228.752 cv
58.7946 228.926 58.5565 229.013 58.3266 229.013 cv
57.8729 229.013 57.4951 228.745 57.1933 228.209 cv
56.938 227.758 56.8103 227.214 56.8103 226.577 cv
cp
57.4988 226.665 mo
57.4988 227.32 57.5793 227.855 57.7403 228.269 cv
57.8744 228.618 58.0735 228.792 58.3378 228.792 cv
58.4636 228.792 58.5943 228.736 58.7298 228.623 cv
58.8661 228.509 58.9695 228.319 59.0398 228.052 cv
59.1469 227.649 59.2005 227.082 59.2005 226.349 cv
59.2005 225.806 59.1443 225.354 59.032 224.991 cv
58.9481 224.722 58.8395 224.531 58.7063 224.418 cv
58.6104 224.341 58.4943 224.303 58.3581 224.303 cv
58.1993 224.303 58.0578 224.374 57.9335 224.517 cv
57.765 224.711 57.6505 225.017 57.5898 225.434 cv
57.5292 225.85 57.4988 226.261 57.4988 226.665 cv
cp
f
grestore
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
65.1769 198.522 mo
466.288 198.522 li
.362066 .286198 .271122 0 cmyk
@
grestore
gsave
.48162 0 mo
518.044 0 li
518.044 258.781 li
.48162 258.781 li
cp
eclp
65.1769 198.522 mo
62.661 198.522 li
@
44.2307 198.666 mo
44.2307 198.123 44.3127 197.656 44.4767 197.264 cv
44.6406 196.872 44.8582 196.58 45.1292 196.388 cv
45.3404 196.236 45.5583 196.16 45.7829 196.16 cv
46.1476 196.16 46.4752 196.346 46.7657 196.718 cv
47.1281 197.179 47.3093 197.804 47.3093 198.593 cv
47.3093 199.145 47.2296 199.614 47.0701 200 cv
46.9113 200.386 46.7084 200.666 46.4613 200.84 cv
46.215 201.015 45.9768 201.102 45.747 201.102 cv
45.2932 201.102 44.9154 200.834 44.6137 200.298 cv
44.3583 199.846 44.2307 199.302 44.2307 198.666 cv
cp
44.9192 198.753 mo
44.9192 199.409 44.9997 199.943 45.1607 200.357 cv
45.2947 200.706 45.4939 200.881 45.7582 200.881 cv
45.884 200.881 46.0147 200.824 46.1502 200.711 cv
46.2865 200.597 46.3898 200.407 46.4602 200.141 cv
46.5673 199.738 46.6208 199.17 46.6208 198.438 cv
46.6208 197.895 46.5646 197.442 46.4523 197.08 cv
46.3685 196.81 46.2599 196.619 46.1266 196.507 cv
46.0308 196.43 45.9147 196.391 45.7784 196.391 cv
45.6197 196.391 45.4782 196.463 45.3539 196.606 cv
45.1854 196.8 45.0708 197.105 45.0102 197.522 cv
44.9495 197.939 44.9192 198.349 44.9192 198.753 cv
cp
f
48.464 200.337 mo
48.574 200.337 48.6665 200.375 48.7414 200.452 cv
48.8163 200.527 48.8537 200.619 48.8537 200.727 cv
48.8537 200.834 48.8155 200.926 48.7391 201.002 cv
48.6635 201.078 48.5718 201.117 48.464 201.117 cv
48.3561 201.117 48.264 201.078 48.1876 201.002 cv
48.112 200.926 48.0742 200.834 48.0742 200.727 cv
48.0742 200.617 48.112 200.524 48.1876 200.449 cv
48.264 200.375 48.3561 200.337 48.464 200.337 cv
cp
f
50.7418 198.621 mo
50.3651 198.312 50.1221 198.063 50.0128 197.876 cv
49.9042 197.689 49.85 197.495 49.85 197.293 cv
49.85 196.985 49.9694 196.719 50.2083 196.496 cv
50.4471 196.272 50.7642 196.16 51.1596 196.16 cv
51.5437 196.16 51.8526 196.264 52.0862 196.472 cv
52.3206 196.68 52.4378 196.918 52.4378 197.184 cv
52.4378 197.363 52.3745 197.544 52.248 197.729 cv
52.1214 197.914 51.8582 198.132 51.4584 198.382 cv
51.8702 198.7 52.1427 198.95 52.276 199.133 cv
52.4535 199.372 52.5422 199.624 52.5422 199.888 cv
52.5422 200.223 52.4146 200.509 52.1592 200.746 cv
51.9046 200.983 51.5703 201.102 51.1562 201.102 cv
50.7047 201.102 50.3524 200.961 50.0993 200.677 cv
49.8986 200.451 49.7983 200.202 49.7983 199.933 cv
49.7983 199.722 49.8691 199.514 50.0106 199.307 cv
50.1521 199.1 50.3958 198.871 50.7418 198.621 cv
cp
51.2932 198.245 mo
51.574 197.992 51.7519 197.793 51.8268 197.647 cv
51.9016 197.5 51.9391 197.335 51.9391 197.15 cv
51.9391 196.904 51.8698 196.712 51.7313 196.572 cv
51.5935 196.433 51.4052 196.363 51.1663 196.363 cv
50.9282 196.363 50.7343 196.433 50.5845 196.571 cv
50.4348 196.709 50.3599 196.87 50.3599 197.055 cv
50.3599 197.177 50.3906 197.298 50.452 197.42 cv
50.5141 197.542 50.6025 197.657 50.7171 197.767 cv
51.2932 198.245 li
cp
50.9069 198.753 mo
50.7129 198.917 50.5692 199.096 50.4756 199.289 cv
50.382 199.482 50.3352 199.691 50.3352 199.916 cv
50.3352 200.218 50.4175 200.459 50.5823 200.64 cv
50.747 200.822 50.957 200.912 51.2124 200.912 cv
51.4647 200.912 51.6669 200.841 51.8189 200.699 cv
51.9716 200.556 52.048 200.382 52.048 200.179 cv
52.048 200.01 52.0035 199.859 51.9144 199.726 cv
51.7481 199.478 51.4123 199.154 50.9069 198.753 cv
cp
f
54.3359 198.621 mo
53.9593 198.312 53.7163 198.063 53.607 197.876 cv
53.4984 197.689 53.4441 197.495 53.4441 197.293 cv
53.4441 196.985 53.5636 196.719 53.8024 196.496 cv
54.0413 196.272 54.3584 196.16 54.7538 196.16 cv
55.1379 196.16 55.4468 196.264 55.6804 196.472 cv
55.9148 196.68 56.032 196.918 56.032 197.184 cv
56.032 197.363 55.9687 197.544 55.8421 197.729 cv
55.7156 197.914 55.4524 198.132 55.0525 198.382 cv
55.4644 198.7 55.7369 198.95 55.8702 199.133 cv
56.0477 199.372 56.1364 199.624 56.1364 199.888 cv
56.1364 200.223 56.0087 200.509 55.7534 200.746 cv
55.4988 200.983 55.1645 201.102 54.7504 201.102 cv
54.2989 201.102 53.9466 200.961 53.6935 200.677 cv
53.4928 200.451 53.3925 200.202 53.3925 199.933 cv
53.3925 199.722 53.4632 199.514 53.6048 199.307 cv
53.7463 199.1 53.99 198.871 54.3359 198.621 cv
cp
54.8874 198.245 mo
55.1682 197.992 55.3461 197.793 55.4209 197.647 cv
55.4958 197.5 55.5333 197.335 55.5333 197.15 cv
55.5333 196.904 55.464 196.712 55.3255 196.572 cv
55.1877 196.433 54.9994 196.363 54.7605 196.363 cv
54.5224 196.363 54.3285 196.433 54.1787 196.571 cv
54.0289 196.709 53.9541 196.87 53.9541 197.055 cv
53.9541 197.177 53.9848 197.298 54.0462 197.42 cv
54.1083 197.542 54.1967 197.657 54.3112 197.767 cv
54.8874 198.245 li
cp
54.5011 198.753 mo
54.3071 198.917 54.1634 199.096 54.0698 199.289 cv
53.9762 199.482 53.9294 199.691 53.9294 199.916 cv
53.9294 200.218 54.0117 200.459 54.1765 200.64 cv
54.3412 200.822 54.5512 200.912 54.8066 200.912 cv
55.0589 200.912 55.2611 200.841 55.4131 200.699 cv
55.5658 200.556 55.6422 200.382 55.6422 200.179 cv
55.6422 200.01 55.5977 199.859 55.5086 199.726 cv
55.3423 199.478 55.0065 199.154 54.5011 198.753 cv
cp
f
59.6711 196.258 mo
59.397 196.855 li
57.965 196.855 li
57.6527 197.493 li
58.2727 197.585 58.7643 197.815 59.1274 198.185 cv
59.4382 198.503 59.5936 198.878 59.5936 199.308 cv
59.5936 199.558 59.5427 199.79 59.4408 200.004 cv
59.3397 200.216 59.2117 200.397 59.0567 200.547 cv
58.9024 200.697 58.7306 200.818 58.5411 200.909 cv
58.2723 201.038 57.996 201.102 57.7122 201.102 cv
57.4269 201.102 57.2192 201.054 57.0889 200.957 cv
56.9593 200.86 56.8946 200.752 56.8946 200.635 cv
56.8946 200.57 56.9215 200.512 56.9754 200.462 cv
57.0293 200.411 57.0971 200.385 57.1787 200.385 cv
57.2401 200.385 57.2937 200.395 57.3393 200.414 cv
57.385 200.432 57.4625 200.481 57.5718 200.558 cv
57.7478 200.68 57.9256 200.74 58.1054 200.74 cv
58.3794 200.74 58.6198 200.637 58.8264 200.43 cv
59.0338 200.223 59.1376 199.971 59.1376 199.673 cv
59.1376 199.386 59.0451 199.117 58.8601 198.868 cv
58.6752 198.619 58.4202 198.426 58.0952 198.291 cv
57.8399 198.185 57.4925 198.124 57.0529 198.108 cv
57.965 196.258 li
59.6711 196.258 li
cp
f
grestore
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
65.1769 170.611 mo
466.288 170.611 li
.362066 .286198 .271122 0 cmyk
@
grestore
gsave
.48162 0 mo
518.044 0 li
518.044 258.781 li
.48162 258.781 li
cp
eclp
65.1769 170.611 mo
62.661 170.611 li
@
44.2307 170.754 mo
44.2307 170.212 44.3127 169.744 44.4767 169.353 cv
44.6406 168.96 44.8582 168.668 45.1292 168.477 cv
45.3404 168.325 45.5583 168.249 45.7829 168.249 cv
46.1476 168.249 46.4752 168.435 46.7657 168.807 cv
47.1281 169.267 47.3093 169.892 47.3093 170.681 cv
47.3093 171.233 47.2296 171.702 47.0701 172.089 cv
46.9113 172.474 46.7084 172.754 46.4613 172.929 cv
46.215 173.103 45.9768 173.191 45.747 173.191 cv
45.2932 173.191 44.9154 172.923 44.6137 172.386 cv
44.3583 171.935 44.2307 171.391 44.2307 170.754 cv
cp
44.9192 170.842 mo
44.9192 171.497 44.9997 172.032 45.1607 172.446 cv
45.2947 172.795 45.4939 172.969 45.7582 172.969 cv
45.884 172.969 46.0147 172.913 46.1502 172.8 cv
46.2865 172.686 46.3898 172.496 46.4602 172.229 cv
46.5673 171.826 46.6208 171.259 46.6208 170.526 cv
46.6208 169.984 46.5646 169.531 46.4523 169.169 cv
46.3685 168.899 46.2599 168.708 46.1266 168.596 cv
46.0308 168.519 45.9147 168.48 45.7784 168.48 cv
45.6197 168.48 45.4782 168.552 45.3539 168.695 cv
45.1854 168.888 45.0708 169.194 45.0102 169.611 cv
44.9495 170.027 44.9192 170.438 44.9192 170.842 cv
cp
f
48.464 172.426 mo
48.574 172.426 48.6665 172.464 48.7414 172.54 cv
48.8163 172.616 48.8537 172.708 48.8537 172.815 cv
48.8537 172.923 48.8155 173.014 48.7391 173.091 cv
48.6635 173.167 48.5718 173.205 48.464 173.205 cv
48.3561 173.205 48.264 173.167 48.1876 173.091 cv
48.112 173.014 48.0742 172.923 48.0742 172.815 cv
48.0742 172.705 48.112 172.613 48.1876 172.538 cv
48.264 172.463 48.3561 172.426 48.464 172.426 cv
cp
f
50.7418 170.71 mo
50.3651 170.4 50.1221 170.152 50.0128 169.965 cv
49.9042 169.778 49.85 169.583 49.85 169.382 cv
49.85 169.073 49.9694 168.808 50.2083 168.584 cv
50.4471 168.361 50.7642 168.249 51.1596 168.249 cv
51.5437 168.249 51.8526 168.353 52.0862 168.561 cv
52.3206 168.769 52.4378 169.006 52.4378 169.273 cv
52.4378 169.451 52.3745 169.633 52.248 169.818 cv
52.1214 170.003 51.8582 170.22 51.4584 170.47 cv
51.8702 170.789 52.1427 171.039 52.276 171.222 cv
52.4535 171.461 52.5422 171.712 52.5422 171.976 cv
52.5422 172.311 52.4146 172.597 52.1592 172.835 cv
51.9046 173.072 51.5703 173.191 51.1562 173.191 cv
50.7047 173.191 50.3524 173.049 50.0993 172.766 cv
49.8986 172.539 49.7983 172.291 49.7983 172.021 cv
49.7983 171.811 49.8691 171.602 50.0106 171.396 cv
50.1521 171.188 50.3958 170.96 50.7418 170.71 cv
cp
51.2932 170.333 mo
51.574 170.081 51.7519 169.882 51.8268 169.736 cv
51.9016 169.589 51.9391 169.423 51.9391 169.238 cv
51.9391 168.993 51.8698 168.8 51.7313 168.661 cv
51.5935 168.522 51.4052 168.452 51.1663 168.452 cv
50.9282 168.452 50.7343 168.521 50.5845 168.66 cv
50.4348 168.798 50.3599 168.959 50.3599 169.144 cv
50.3599 169.265 50.3906 169.387 50.452 169.509 cv
50.5141 169.63 50.6025 169.746 50.7171 169.856 cv
51.2932 170.333 li
cp
50.9069 170.842 mo
50.7129 171.006 50.5692 171.185 50.4756 171.378 cv
50.382 171.571 50.3352 171.78 50.3352 172.005 cv
50.3352 172.306 50.4175 172.548 50.5823 172.729 cv
50.747 172.91 50.957 173.001 51.2124 173.001 cv
51.4647 173.001 51.6669 172.93 51.8189 172.787 cv
51.9716 172.644 52.048 172.471 52.048 172.267 cv
52.048 172.099 52.0035 171.948 51.9144 171.815 cv
51.7481 171.567 51.4123 171.243 50.9069 170.842 cv
cp
f
53.3363 173.205 mo
53.3363 173.075 li
53.6403 173.07 53.9234 173 54.1854 172.863 cv
54.4475 172.726 54.7006 172.486 54.9447 172.145 cv
55.1896 171.803 55.3599 171.427 55.4558 171.018 cv
55.0881 171.254 54.756 171.372 54.4595 171.372 cv
54.1248 171.372 53.838 171.243 53.5991 170.985 cv
53.3603 170.726 53.2408 170.383 53.2408 169.955 cv
53.2408 169.538 53.3603 169.167 53.5991 168.842 cv
53.8867 168.446 54.2622 168.249 54.7257 168.249 cv
55.1166 168.249 55.4513 168.41 55.7298 168.733 cv
56.0713 169.133 56.242 169.627 56.242 170.214 cv
56.242 170.743 56.1121 171.236 55.8522 171.693 cv
55.5924 172.151 55.2311 172.531 54.7684 172.832 cv
54.391 173.081 53.9803 173.205 53.5362 173.205 cv
53.3363 173.205 li
cp
55.5119 170.758 mo
55.5539 170.454 55.5748 170.21 55.5748 170.028 cv
55.5748 169.801 55.5363 169.556 55.4591 169.293 cv
55.382 169.03 55.2727 168.828 55.1312 168.688 cv
54.9896 168.547 54.8287 168.477 54.6482 168.477 cv
54.44 168.477 54.2573 168.57 54.1001 168.757 cv
53.9436 168.945 53.8653 169.223 53.8653 169.593 cv
53.8653 170.087 53.9698 170.473 54.1787 170.751 cv
54.3307 170.953 54.5179 171.053 54.7403 171.053 cv
54.8474 171.053 54.9747 171.027 55.1222 170.976 cv
55.2697 170.924 55.3996 170.851 55.5119 170.758 cv
cp
f
56.8103 170.754 mo
56.8103 170.212 56.8923 169.744 57.0563 169.353 cv
57.2203 168.96 57.4378 168.668 57.7089 168.477 cv
57.92 168.325 58.1379 168.249 58.3626 168.249 cv
58.7272 168.249 59.0548 168.435 59.3453 168.807 cv
59.7078 169.267 59.889 169.892 59.889 170.681 cv
59.889 171.233 59.8092 171.702 59.6497 172.089 cv
59.491 172.474 59.2881 172.754 59.041 172.929 cv
58.7946 173.103 58.5565 173.191 58.3266 173.191 cv
57.8729 173.191 57.4951 172.923 57.1933 172.386 cv
56.938 171.935 56.8103 171.391 56.8103 170.754 cv
cp
57.4988 170.842 mo
57.4988 171.497 57.5793 172.032 57.7403 172.446 cv
57.8744 172.795 58.0735 172.969 58.3378 172.969 cv
58.4636 172.969 58.5943 172.913 58.7298 172.8 cv
58.8661 172.686 58.9695 172.496 59.0398 172.229 cv
59.1469 171.826 59.2005 171.259 59.2005 170.526 cv
59.2005 169.984 59.1443 169.531 59.032 169.169 cv
58.9481 168.899 58.8395 168.708 58.7063 168.596 cv
58.6104 168.519 58.4943 168.48 58.3581 168.48 cv
58.1993 168.48 58.0578 168.552 57.9335 168.695 cv
57.765 168.888 57.6505 169.194 57.5898 169.611 cv
57.5292 170.027 57.4988 170.438 57.4988 170.842 cv
cp
f
grestore
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
65.1769 142.699 mo
466.288 142.699 li
.362066 .286198 .271122 0 cmyk
@
grestore
65.1769 142.699 mo
62.661 142.699 li
@
44.2307 142.843 mo
44.2307 142.3 44.3127 141.833 44.4767 141.441 cv
44.6406 141.049 44.8582 140.757 45.1292 140.565 cv
45.3404 140.413 45.5583 140.337 45.7829 140.337 cv
46.1476 140.337 46.4752 140.523 46.7657 140.895 cv
47.1281 141.356 47.3093 141.981 47.3093 142.77 cv
47.3093 143.322 47.2296 143.791 47.0701 144.177 cv
46.9113 144.563 46.7084 144.843 46.4613 145.018 cv
46.215 145.192 45.9768 145.279 45.747 145.279 cv
45.2932 145.279 44.9154 145.011 44.6137 144.475 cv
44.3583 144.024 44.2307 143.48 44.2307 142.843 cv
cp
44.9192 142.931 mo
44.9192 143.586 44.9997 144.12 45.1607 144.535 cv
45.2947 144.884 45.4939 145.058 45.7582 145.058 cv
45.884 145.058 46.0147 145.001 46.1502 144.888 cv
46.2865 144.775 46.3898 144.584 46.4602 144.318 cv
46.5673 143.915 46.6208 143.347 46.6208 142.615 cv
46.6208 142.072 46.5646 141.62 46.4523 141.257 cv
46.3685 140.988 46.2599 140.797 46.1266 140.684 cv
46.0308 140.607 45.9147 140.569 45.7784 140.569 cv
45.6197 140.569 45.4782 140.64 45.3539 140.783 cv
45.1854 140.977 45.0708 141.283 45.0102 141.7 cv
44.9495 142.116 44.9192 142.526 44.9192 142.931 cv
cp
f
48.464 144.514 mo
48.574 144.514 48.6665 144.553 48.7414 144.629 cv
48.8163 144.705 48.8537 144.796 48.8537 144.904 cv
48.8537 145.011 48.8155 145.103 48.7391 145.179 cv
48.6635 145.256 48.5718 145.294 48.464 145.294 cv
48.3561 145.294 48.264 145.256 48.1876 145.179 cv
48.112 145.103 48.0742 145.011 48.0742 144.904 cv
48.0742 144.794 48.112 144.702 48.1876 144.627 cv
48.264 144.552 48.3561 144.514 48.464 144.514 cv
cp
f
50.7418 142.798 mo
50.3651 142.489 50.1221 142.241 50.0128 142.053 cv
49.9042 141.866 49.85 141.672 49.85 141.471 cv
49.85 141.162 49.9694 140.896 50.2083 140.673 cv
50.4471 140.449 50.7642 140.337 51.1596 140.337 cv
51.5437 140.337 51.8526 140.441 52.0862 140.649 cv
52.3206 140.858 52.4378 141.095 52.4378 141.362 cv
52.4378 141.54 52.3745 141.721 52.248 141.906 cv
52.1214 142.091 51.8582 142.309 51.4584 142.559 cv
51.8702 142.877 52.1427 143.128 52.276 143.31 cv
52.4535 143.549 52.5422 143.801 52.5422 144.065 cv
52.5422 144.4 52.4146 144.686 52.1592 144.923 cv
51.9046 145.161 51.5703 145.279 51.1562 145.279 cv
50.7047 145.279 50.3524 145.138 50.0993 144.855 cv
49.8986 144.628 49.7983 144.38 49.7983 144.11 cv
49.7983 143.9 49.8691 143.691 50.0106 143.484 cv
50.1521 143.277 50.3958 143.048 50.7418 142.798 cv
cp
51.2932 142.422 mo
51.574 142.17 51.7519 141.97 51.8268 141.824 cv
51.9016 141.678 51.9391 141.512 51.9391 141.327 cv
51.9391 141.081 51.8698 140.889 51.7313 140.749 cv
51.5935 140.61 51.4052 140.541 51.1663 140.541 cv
50.9282 140.541 50.7343 140.61 50.5845 140.748 cv
50.4348 140.886 50.3599 141.047 50.3599 141.232 cv
50.3599 141.354 50.3906 141.475 50.452 141.597 cv
50.5141 141.719 50.6025 141.834 50.7171 141.945 cv
51.2932 142.422 li
cp
50.9069 142.931 mo
50.7129 143.095 50.5692 143.273 50.4756 143.466 cv
50.382 143.66 50.3352 143.869 50.3352 144.093 cv
50.3352 144.395 50.4175 144.636 50.5823 144.818 cv
50.747 144.999 50.957 145.089 51.2124 145.089 cv
51.4647 145.089 51.6669 145.018 51.8189 144.876 cv
51.9716 144.733 52.048 144.56 52.048 144.356 cv
52.048 144.188 52.0035 144.037 51.9144 143.903 cv
51.7481 143.656 51.4123 143.331 50.9069 142.931 cv
cp
f
53.3363 145.294 mo
53.3363 145.164 li
53.6403 145.159 53.9234 145.088 54.1854 144.951 cv
54.4475 144.814 54.7006 144.575 54.9447 144.234 cv
55.1896 143.891 55.3599 143.516 55.4558 143.107 cv
55.0881 143.343 54.756 143.461 54.4595 143.461 cv
54.1248 143.461 53.838 143.332 53.5991 143.073 cv
53.3603 142.815 53.2408 142.472 53.2408 142.043 cv
53.2408 141.626 53.3603 141.255 53.5991 140.93 cv
53.8867 140.535 54.2622 140.337 54.7257 140.337 cv
55.1166 140.337 55.4513 140.499 55.7298 140.821 cv
56.0713 141.222 56.242 141.716 56.242 142.303 cv
56.242 142.831 56.1121 143.325 55.8522 143.782 cv
55.5924 144.24 55.2311 144.619 54.7684 144.921 cv
54.391 145.17 53.9803 145.294 53.5362 145.294 cv
53.3363 145.294 li
cp
55.5119 142.846 mo
55.5539 142.542 55.5748 142.299 55.5748 142.116 cv
55.5748 141.889 55.5363 141.645 55.4591 141.382 cv
55.382 141.118 55.2727 140.916 55.1312 140.776 cv
54.9896 140.636 54.8287 140.565 54.6482 140.565 cv
54.44 140.565 54.2573 140.659 54.1001 140.846 cv
53.9436 141.033 53.8653 141.312 53.8653 141.682 cv
53.8653 142.175 53.9698 142.561 54.1787 142.84 cv
54.3307 143.041 54.5179 143.142 54.7403 143.142 cv
54.8474 143.142 54.9747 143.116 55.1222 143.064 cv
55.2697 143.013 55.3996 142.94 55.5119 142.846 cv
cp
f
59.6711 140.435 mo
59.397 141.033 li
57.965 141.033 li
57.6527 141.67 li
58.2727 141.762 58.7643 141.992 59.1274 142.362 cv
59.4382 142.681 59.5936 143.055 59.5936 143.486 cv
59.5936 143.736 59.5427 143.967 59.4408 144.181 cv
59.3397 144.393 59.2117 144.575 59.0567 144.724 cv
58.9024 144.874 58.7306 144.995 58.5411 145.086 cv
58.2723 145.215 57.996 145.279 57.7122 145.279 cv
57.4269 145.279 57.2192 145.231 57.0889 145.134 cv
56.9593 145.037 56.8946 144.93 56.8946 144.812 cv
56.8946 144.747 56.9215 144.689 56.9754 144.639 cv
57.0293 144.588 57.0971 144.563 57.1787 144.563 cv
57.2401 144.563 57.2937 144.572 57.3393 144.591 cv
57.385 144.609 57.4625 144.658 57.5718 144.736 cv
57.7478 144.857 57.9256 144.918 58.1054 144.918 cv
58.3794 144.918 58.6198 144.814 58.8264 144.608 cv
59.0338 144.4 59.1376 144.148 59.1376 143.851 cv
59.1376 143.563 59.0451 143.295 58.8601 143.045 cv
58.6752 142.796 58.4202 142.603 58.0952 142.468 cv
57.8399 142.362 57.4925 142.301 57.0529 142.285 cv
57.965 140.435 li
59.6711 140.435 li
cp
f
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
65.1769 114.788 mo
466.288 114.788 li
.362066 .286198 .271122 0 cmyk
@
grestore
gsave
.48162 0 mo
518.044 0 li
518.044 258.781 li
.48162 258.781 li
cp
eclp
65.1769 114.788 mo
62.661 114.788 li
@
44.2307 114.932 mo
44.2307 114.389 44.3127 113.922 44.4767 113.53 cv
44.6406 113.138 44.8582 112.846 45.1292 112.654 cv
45.3404 112.502 45.5583 112.426 45.7829 112.426 cv
46.1476 112.426 46.4752 112.612 46.7657 112.984 cv
47.1281 113.445 47.3093 114.069 47.3093 114.859 cv
47.3093 115.411 47.2296 115.88 47.0701 116.266 cv
46.9113 116.652 46.7084 116.932 46.4613 117.106 cv
46.215 117.281 45.9768 117.368 45.747 117.368 cv
45.2932 117.368 44.9154 117.1 44.6137 116.564 cv
44.3583 116.112 44.2307 115.568 44.2307 114.932 cv
cp
44.9192 115.019 mo
44.9192 115.674 44.9997 116.209 45.1607 116.623 cv
45.2947 116.972 45.4939 117.147 45.7582 117.147 cv
45.884 117.147 46.0147 117.09 46.1502 116.977 cv
46.2865 116.863 46.3898 116.673 46.4602 116.406 cv
46.5673 116.004 46.6208 115.436 46.6208 114.704 cv
46.6208 114.161 46.5646 113.708 46.4523 113.346 cv
46.3685 113.076 46.2599 112.885 46.1266 112.773 cv
46.0308 112.696 45.9147 112.657 45.7784 112.657 cv
45.6197 112.657 45.4782 112.729 45.3539 112.872 cv
45.1854 113.066 45.0708 113.371 45.0102 113.788 cv
44.9495 114.205 44.9192 114.615 44.9192 115.019 cv
cp
f
48.464 116.603 mo
48.574 116.603 48.6665 116.641 48.7414 116.718 cv
48.8163 116.793 48.8537 116.885 48.8537 116.993 cv
48.8537 117.1 48.8155 117.192 48.7391 117.268 cv
48.6635 117.344 48.5718 117.382 48.464 117.382 cv
48.3561 117.382 48.264 117.344 48.1876 117.268 cv
48.112 117.192 48.0742 117.1 48.0742 116.993 cv
48.0742 116.883 48.112 116.79 48.1876 116.715 cv
48.264 116.64 48.3561 116.603 48.464 116.603 cv
cp
f
49.7421 117.382 mo
49.7421 117.252 li
50.0461 117.248 50.3292 117.177 50.5913 117.04 cv
50.8533 116.903 51.1064 116.664 51.3505 116.322 cv
51.5954 115.98 51.7657 115.604 51.8616 115.196 cv
51.4939 115.431 51.1618 115.549 50.8653 115.549 cv
50.5306 115.549 50.2438 115.42 50.005 115.162 cv
49.7661 114.904 49.6467 114.56 49.6467 114.132 cv
49.6467 113.715 49.7661 113.344 50.005 113.019 cv
50.2925 112.624 50.668 112.426 51.1315 112.426 cv
51.5224 112.426 51.8571 112.587 52.1356 112.91 cv
52.4771 113.311 52.6478 113.804 52.6478 114.391 cv
52.6478 114.92 52.5179 115.413 52.2581 115.871 cv
51.9982 116.328 51.6369 116.708 51.1742 117.01 cv
50.7968 117.258 50.3861 117.382 49.9421 117.382 cv
49.7421 117.382 li
cp
51.9177 114.935 mo
51.9597 114.631 51.9806 114.388 51.9806 114.205 cv
51.9806 113.978 51.9421 113.733 51.8649 113.47 cv
51.7878 113.207 51.6785 113.005 51.537 112.865 cv
51.3955 112.724 51.2345 112.654 51.054 112.654 cv
50.8458 112.654 50.6631 112.747 50.5059 112.935 cv
50.3494 113.122 50.2712 113.4 50.2712 113.77 cv
50.2712 114.264 50.3756 114.65 50.5845 114.928 cv
50.7365 115.13 50.9237 115.23 51.1461 115.23 cv
51.2532 115.23 51.3805 115.205 51.528 115.153 cv
51.6755 115.101 51.8054 115.029 51.9177 114.935 cv
cp
f
53.2161 114.932 mo
53.2161 114.389 53.2981 113.922 53.4621 113.53 cv
53.6261 113.138 53.8436 112.846 54.1147 112.654 cv
54.3258 112.502 54.5437 112.426 54.7684 112.426 cv
55.133 112.426 55.4606 112.612 55.7512 112.984 cv
56.1136 113.445 56.2948 114.069 56.2948 114.859 cv
56.2948 115.411 56.215 115.88 56.0555 116.266 cv
55.8968 116.652 55.6939 116.932 55.4468 117.106 cv
55.2004 117.281 54.9623 117.368 54.7324 117.368 cv
54.2787 117.368 53.9009 117.1 53.5991 116.564 cv
53.3438 116.112 53.2161 115.568 53.2161 114.932 cv
cp
53.9046 115.019 mo
53.9046 115.674 53.9851 116.209 54.1461 116.623 cv
54.2802 116.972 54.4793 117.147 54.7437 117.147 cv
54.8695 117.147 55.0001 117.09 55.1357 116.977 cv
55.2719 116.863 55.3753 116.673 55.4457 116.406 cv
55.5527 116.004 55.6063 115.436 55.6063 114.704 cv
55.6063 114.161 55.5501 113.708 55.4378 113.346 cv
55.3539 113.076 55.2454 112.885 55.1121 112.773 cv
55.0162 112.696 54.9002 112.657 54.7639 112.657 cv
54.6051 112.657 54.4636 112.729 54.3393 112.872 cv
54.1708 113.066 54.0563 113.371 53.9956 113.788 cv
53.935 114.205 53.9046 114.615 53.9046 115.019 cv
cp
f
56.8103 114.932 mo
56.8103 114.389 56.8923 113.922 57.0563 113.53 cv
57.2203 113.138 57.4378 112.846 57.7089 112.654 cv
57.92 112.502 58.1379 112.426 58.3626 112.426 cv
58.7272 112.426 59.0548 112.612 59.3453 112.984 cv
59.7078 113.445 59.889 114.069 59.889 114.859 cv
59.889 115.411 59.8092 115.88 59.6497 116.266 cv
59.491 116.652 59.2881 116.932 59.041 117.106 cv
58.7946 117.281 58.5565 117.368 58.3266 117.368 cv
57.8729 117.368 57.4951 117.1 57.1933 116.564 cv
56.938 116.112 56.8103 115.568 56.8103 114.932 cv
cp
57.4988 115.019 mo
57.4988 115.674 57.5793 116.209 57.7403 116.623 cv
57.8744 116.972 58.0735 117.147 58.3378 117.147 cv
58.4636 117.147 58.5943 117.09 58.7298 116.977 cv
58.8661 116.863 58.9695 116.673 59.0398 116.406 cv
59.1469 116.004 59.2005 115.436 59.2005 114.704 cv
59.2005 114.161 59.1443 113.708 59.032 113.346 cv
58.9481 113.076 58.8395 112.885 58.7063 112.773 cv
58.6104 112.696 58.4943 112.657 58.3581 112.657 cv
58.1993 112.657 58.0578 112.729 57.9335 112.872 cv
57.765 113.066 57.6505 113.371 57.5898 113.788 cv
57.5292 114.205 57.4988 114.615 57.4988 115.019 cv
cp
f
grestore
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
65.1769 86.8765 mo
466.288 86.8765 li
.362066 .286198 .271122 0 cmyk
@
grestore
gsave
.48162 0 mo
518.044 0 li
518.044 258.781 li
.48162 258.781 li
cp
eclp
65.1769 86.8765 mo
62.661 86.8765 li
@
44.2307 87.0203 mo
44.2307 86.4774 44.3127 86.0102 44.4767 85.6186 cv
44.6406 85.2262 44.8582 84.9342 45.1292 84.7425 cv
45.3404 84.5905 45.5583 84.5145 45.7829 84.5145 cv
46.1476 84.5145 46.4752 84.7005 46.7657 85.0727 cv
47.1281 85.5332 47.3093 86.1581 47.3093 86.9473 cv
47.3093 87.4991 47.2296 87.9682 47.0701 88.3546 cv
46.9113 88.7402 46.7084 89.0203 46.4613 89.1948 cv
46.215 89.3692 45.9768 89.4565 45.747 89.4565 cv
45.2932 89.4565 44.9154 89.1884 44.6137 88.6523 cv
44.3583 88.2008 44.2307 87.6567 44.2307 87.0203 cv
cp
44.9192 87.1079 mo
44.9192 87.7631 44.9997 88.2977 45.1607 88.7118 cv
45.2947 89.0607 45.4939 89.2352 45.7582 89.2352 cv
45.884 89.2352 46.0147 89.1787 46.1502 89.0656 cv
46.2865 88.9518 46.3898 88.7616 46.4602 88.495 cv
46.5673 88.0922 46.6208 87.5246 46.6208 86.7923 cv
46.6208 86.2494 46.5646 85.7968 46.4523 85.4343 cv
46.3685 85.1648 46.2599 84.9738 46.1266 84.8615 cv
46.0308 84.7844 45.9147 84.7458 45.7784 84.7458 cv
45.6197 84.7458 45.4782 84.8173 45.3539 84.9604 cv
45.1854 85.1543 45.0708 85.4598 45.0102 85.8769 cv
44.9495 86.2932 44.9192 86.7035 44.9192 87.1079 cv
cp
f
48.464 88.6916 mo
48.574 88.6916 48.6665 88.7298 48.7414 88.8061 cv
48.8163 88.8818 48.8537 88.9735 48.8537 89.0813 cv
48.8537 89.1884 48.8155 89.2801 48.7391 89.3565 cv
48.6635 89.4329 48.5718 89.4711 48.464 89.4711 cv
48.3561 89.4711 48.264 89.4329 48.1876 89.3565 cv
48.112 89.2801 48.0742 89.1884 48.0742 89.0813 cv
48.0742 88.9713 48.112 88.8788 48.1876 88.8039 cv
48.264 88.729 48.3561 88.6916 48.464 88.6916 cv
cp
f
49.7421 89.4711 mo
49.7421 89.3408 li
50.0461 89.3363 50.3292 89.2655 50.5913 89.1285 cv
50.8533 88.9915 51.1064 88.7522 51.3505 88.4108 cv
51.5954 88.0686 51.7657 87.6931 51.8616 87.2842 cv
51.4939 87.5201 51.1618 87.638 50.8653 87.638 cv
50.5306 87.638 50.2438 87.5089 50.005 87.2505 cv
49.7661 86.9922 49.6467 86.6489 49.6467 86.2206 cv
49.6467 85.8035 49.7661 85.4325 50.005 85.1075 cv
50.2925 84.7121 50.668 84.5145 51.1315 84.5145 cv
51.5224 84.5145 51.8571 84.6758 52.1356 84.9986 cv
52.4771 85.3992 52.6478 85.893 52.6478 86.48 cv
52.6478 87.0087 52.5179 87.5018 52.2581 87.9593 cv
51.9982 88.4168 51.6369 88.7964 51.1742 89.0982 cv
50.7968 89.3468 50.3861 89.4711 49.9421 89.4711 cv
49.7421 89.4711 li
cp
51.9177 87.0237 mo
51.9597 86.7196 51.9806 86.4763 51.9806 86.2936 cv
51.9806 86.0667 51.9421 85.8218 51.8649 85.559 cv
51.7878 85.2954 51.6785 85.0936 51.537 84.9536 cv
51.3955 84.8129 51.2345 84.7425 51.054 84.7425 cv
50.8458 84.7425 50.6631 84.8361 50.5059 85.0233 cv
50.3494 85.2105 50.2712 85.489 50.2712 85.8589 cv
50.2712 86.3524 50.3756 86.7384 50.5845 87.0169 cv
50.7365 87.2183 50.9237 87.319 51.1461 87.319 cv
51.2532 87.319 51.3805 87.2932 51.528 87.2415 cv
51.6755 87.1899 51.8054 87.1172 51.9177 87.0237 cv
cp
f
53.2161 87.0203 mo
53.2161 86.4774 53.2981 86.0102 53.4621 85.6186 cv
53.6261 85.2262 53.8436 84.9342 54.1147 84.7425 cv
54.3258 84.5905 54.5437 84.5145 54.7684 84.5145 cv
55.133 84.5145 55.4606 84.7005 55.7512 85.0727 cv
56.1136 85.5332 56.2948 86.1581 56.2948 86.9473 cv
56.2948 87.4991 56.215 87.9682 56.0555 88.3546 cv
55.8968 88.7402 55.6939 89.0203 55.4468 89.1948 cv
55.2004 89.3692 54.9623 89.4565 54.7324 89.4565 cv
54.2787 89.4565 53.9009 89.1884 53.5991 88.6523 cv
53.3438 88.2008 53.2161 87.6567 53.2161 87.0203 cv
cp
53.9046 87.1079 mo
53.9046 87.7631 53.9851 88.2977 54.1461 88.7118 cv
54.2802 89.0607 54.4793 89.2352 54.7437 89.2352 cv
54.8695 89.2352 55.0001 89.1787 55.1357 89.0656 cv
55.2719 88.9518 55.3753 88.7616 55.4457 88.495 cv
55.5527 88.0922 55.6063 87.5246 55.6063 86.7923 cv
55.6063 86.2494 55.5501 85.7968 55.4378 85.4343 cv
55.3539 85.1648 55.2454 84.9738 55.1121 84.8615 cv
55.0162 84.7844 54.9002 84.7458 54.7639 84.7458 cv
54.6051 84.7458 54.4636 84.8173 54.3393 84.9604 cv
54.1708 85.1543 54.0563 85.4598 53.9956 85.8769 cv
53.935 86.2932 53.9046 86.7035 53.9046 87.1079 cv
cp
f
59.6711 84.6122 mo
59.397 85.2097 li
57.965 85.2097 li
57.6527 85.8477 li
58.2727 85.939 58.7643 86.1697 59.1274 86.5396 cv
59.4382 86.8578 59.5936 87.2322 59.5936 87.6627 cv
59.5936 87.9128 59.5427 88.1446 59.4408 88.358 cv
59.3397 88.5706 59.2117 88.7519 59.0567 88.9016 cv
58.9024 89.0514 58.7306 89.1719 58.5411 89.2633 cv
58.2723 89.3921 57.996 89.4565 57.7122 89.4565 cv
57.4269 89.4565 57.2192 89.4082 57.0889 89.3116 cv
56.9593 89.2142 56.8946 89.1068 56.8946 88.9892 cv
56.8946 88.9241 56.9215 88.8664 56.9754 88.8162 cv
57.0293 88.7653 57.0971 88.7399 57.1787 88.7399 cv
57.2401 88.7399 57.2937 88.7492 57.3393 88.768 cv
57.385 88.7867 57.4625 88.835 57.5718 88.9128 cv
57.7478 89.0341 57.9256 89.0948 58.1054 89.0948 cv
58.3794 89.0948 58.6198 88.9915 58.8264 88.7848 cv
59.0338 88.5774 59.1376 88.3251 59.1376 88.0278 cv
59.1376 87.7402 59.0451 87.4718 58.8601 87.2225 cv
58.6752 86.9731 58.4202 86.7807 58.0952 86.6451 cv
57.8399 86.5396 57.4925 86.4785 57.0529 86.4621 cv
57.965 84.6122 li
59.6711 84.6122 li
cp
f
grestore
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
65.1769 58.9651 mo
466.288 58.9651 li
.362066 .286198 .271122 0 cmyk
@
grestore
65.1769 58.9651 mo
62.661 58.9651 li
@
44.2307 59.1089 mo
44.2307 58.566 44.3127 58.0988 44.4767 57.7072 cv
44.6406 57.3148 44.8582 57.0228 45.1292 56.8311 cv
45.3404 56.6791 45.5583 56.6031 45.7829 56.6031 cv
46.1476 56.6031 46.4752 56.7891 46.7657 57.1613 cv
47.1281 57.6218 47.3093 58.2467 47.3093 59.0359 cv
47.3093 59.5877 47.2296 60.0569 47.0701 60.4432 cv
46.9113 60.8289 46.7084 61.1089 46.4613 61.2834 cv
46.215 61.4578 45.9768 61.5451 45.747 61.5451 cv
45.2932 61.5451 44.9154 61.277 44.6137 60.7409 cv
44.3583 60.2894 44.2307 59.7454 44.2307 59.1089 cv
cp
44.9192 59.1965 mo
44.9192 59.8517 44.9997 60.3863 45.1607 60.8004 cv
45.2947 61.1493 45.4939 61.3238 45.7582 61.3238 cv
45.884 61.3238 46.0147 61.2673 46.1502 61.1542 cv
46.2865 61.0404 46.3898 60.8502 46.4602 60.5836 cv
46.5673 60.1808 46.6208 59.6132 46.6208 58.8809 cv
46.6208 58.338 46.5646 57.8854 46.4523 57.523 cv
46.3685 57.2534 46.2599 57.0625 46.1266 56.9501 cv
46.0308 56.873 45.9147 56.8344 45.7784 56.8344 cv
45.6197 56.8344 45.4782 56.906 45.3539 57.049 cv
45.1854 57.2429 45.0708 57.5484 45.0102 57.9655 cv
44.9495 58.3818 44.9192 58.7922 44.9192 59.1965 cv
cp
f
48.464 60.7802 mo
48.574 60.7802 48.6665 60.8184 48.7414 60.8947 cv
48.8163 60.9704 48.8537 61.0621 48.8537 61.1699 cv
48.8537 61.277 48.8155 61.3687 48.7391 61.4451 cv
48.6635 61.5215 48.5718 61.5597 48.464 61.5597 cv
48.3561 61.5597 48.264 61.5215 48.1876 61.4451 cv
48.112 61.3687 48.0742 61.277 48.0742 61.1699 cv
48.0742 61.0599 48.112 60.9674 48.1876 60.8925 cv
48.264 60.8176 48.3561 60.7802 48.464 60.7802 cv
cp
f
49.7421 61.5597 mo
49.7421 61.4294 li
50.0461 61.4249 50.3292 61.3541 50.5913 61.2171 cv
50.8533 61.0801 51.1064 60.8408 51.3505 60.4994 cv
51.5954 60.1572 51.7657 59.7817 51.8616 59.3728 cv
51.4939 59.6087 51.1618 59.7266 50.8653 59.7266 cv
50.5306 59.7266 50.2438 59.5975 50.005 59.3391 cv
49.7661 59.0808 49.6467 58.7375 49.6467 58.3092 cv
49.6467 57.8921 49.7661 57.5211 50.005 57.1961 cv
50.2925 56.8007 50.668 56.6031 51.1315 56.6031 cv
51.5224 56.6031 51.8571 56.7644 52.1356 57.0872 cv
52.4771 57.4878 52.6478 57.9816 52.6478 58.5686 cv
52.6478 59.0973 52.5179 59.5904 52.2581 60.0479 cv
51.9982 60.5054 51.6369 60.885 51.1742 61.1868 cv
50.7968 61.4354 50.3861 61.5597 49.9421 61.5597 cv
49.7421 61.5597 li
cp
51.9177 59.1123 mo
51.9597 58.8083 51.9806 58.5649 51.9806 58.3822 cv
51.9806 58.1553 51.9421 57.9105 51.8649 57.6476 cv
51.7878 57.3841 51.6785 57.1823 51.537 57.0422 cv
51.3955 56.9015 51.2345 56.8311 51.054 56.8311 cv
50.8458 56.8311 50.6631 56.9247 50.5059 57.1119 cv
50.3494 57.2991 50.2712 57.5776 50.2712 57.9475 cv
50.2712 58.441 50.3756 58.827 50.5845 59.1055 cv
50.7365 59.3069 50.9237 59.4077 51.1461 59.4077 cv
51.2532 59.4077 51.3805 59.3818 51.528 59.3302 cv
51.6755 59.2785 51.8054 59.2059 51.9177 59.1123 cv
cp
f
53.7991 57.168 mo
54.9571 56.6031 li
55.0728 56.6031 li
55.0728 60.6218 li
55.0728 60.8884 55.084 61.0546 55.1065 61.1205 cv
55.1289 61.1857 55.175 61.2358 55.2446 61.271 cv
55.315 61.3062 55.458 61.326 55.6737 61.3305 cv
55.6737 61.4608 li
53.8833 61.4608 li
53.8833 61.3305 li
54.1079 61.326 54.2528 61.307 54.318 61.2733 cv
54.3839 61.2388 54.4295 61.1931 54.455 61.1362 cv
54.4812 61.0786 54.4943 60.9071 54.4943 60.6218 cv
54.4943 58.0531 li
54.4943 57.7064 54.4827 57.484 54.4595 57.3859 cv
54.443 57.3111 54.4131 57.256 54.3696 57.2208 cv
54.3262 57.1856 54.2742 57.168 54.2135 57.168 cv
54.1267 57.168 54.0061 57.2043 53.8519 57.277 cv
53.7991 57.168 li
cp
f
56.8103 59.1089 mo
56.8103 58.566 56.8923 58.0988 57.0563 57.7072 cv
57.2203 57.3148 57.4378 57.0228 57.7089 56.8311 cv
57.92 56.6791 58.1379 56.6031 58.3626 56.6031 cv
58.7272 56.6031 59.0548 56.7891 59.3453 57.1613 cv
59.7078 57.6218 59.889 58.2467 59.889 59.0359 cv
59.889 59.5877 59.8092 60.0569 59.6497 60.4432 cv
59.491 60.8289 59.2881 61.1089 59.041 61.2834 cv
58.7946 61.4578 58.5565 61.5451 58.3266 61.5451 cv
57.8729 61.5451 57.4951 61.277 57.1933 60.7409 cv
56.938 60.2894 56.8103 59.7454 56.8103 59.1089 cv
cp
57.4988 59.1965 mo
57.4988 59.8517 57.5793 60.3863 57.7403 60.8004 cv
57.8744 61.1493 58.0735 61.3238 58.3378 61.3238 cv
58.4636 61.3238 58.5943 61.2673 58.7298 61.1542 cv
58.8661 61.0404 58.9695 60.8502 59.0398 60.5836 cv
59.1469 60.1808 59.2005 59.6132 59.2005 58.8809 cv
59.2005 58.338 59.1443 57.8854 59.032 57.523 cv
58.9481 57.2534 58.8395 57.0625 58.7063 56.9501 cv
58.6104 56.873 58.4943 56.8344 58.3581 56.8344 cv
58.1993 56.8344 58.0578 56.906 57.9335 57.049 cv
57.765 57.2429 57.6505 57.5484 57.5898 57.9655 cv
57.5292 58.3818 57.4988 58.7922 57.4988 59.1965 cv
cp
f
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
2 lc
65.1769 31.0537 mo
466.288 31.0537 li
.362066 .286198 .271122 0 cmyk
@
grestore
gsave
.48162 0 mo
518.044 0 li
518.044 258.781 li
.48162 258.781 li
cp
eclp
65.1769 31.0537 mo
62.661 31.0537 li
@
44.2307 31.1975 mo
44.2307 30.6546 44.3127 30.1874 44.4767 29.7958 cv
44.6406 29.4034 44.8582 29.1114 45.1292 28.9197 cv
45.3404 28.7677 45.5583 28.6917 45.7829 28.6917 cv
46.1476 28.6917 46.4752 28.8778 46.7657 29.2499 cv
47.1281 29.7104 47.3093 30.3353 47.3093 31.1245 cv
47.3093 31.6764 47.2296 32.1455 47.0701 32.5318 cv
46.9113 32.9175 46.7084 33.1975 46.4613 33.372 cv
46.215 33.5465 45.9768 33.6337 45.747 33.6337 cv
45.2932 33.6337 44.9154 33.3656 44.6137 32.8295 cv
44.3583 32.378 44.2307 31.834 44.2307 31.1975 cv
cp
44.9192 31.2851 mo
44.9192 31.9403 44.9997 32.4749 45.1607 32.889 cv
45.2947 33.2379 45.4939 33.4124 45.7582 33.4124 cv
45.884 33.4124 46.0147 33.3559 46.1502 33.2428 cv
46.2865 33.129 46.3898 32.9388 46.4602 32.6722 cv
46.5673 32.2694 46.6208 31.7018 46.6208 30.9695 cv
46.6208 30.4266 46.5646 29.974 46.4523 29.6116 cv
46.3685 29.342 46.2599 29.1511 46.1266 29.0387 cv
46.0308 28.9616 45.9147 28.9231 45.7784 28.9231 cv
45.6197 28.9231 45.4782 28.9946 45.3539 29.1376 cv
45.1854 29.3315 45.0708 29.637 45.0102 30.0541 cv
44.9495 30.4704 44.9192 30.8808 44.9192 31.2851 cv
cp
f
48.464 32.8688 mo
48.574 32.8688 48.6665 32.907 48.7414 32.9834 cv
48.8163 33.059 48.8537 33.1507 48.8537 33.2585 cv
48.8537 33.3656 48.8155 33.4573 48.7391 33.5337 cv
48.6635 33.6101 48.5718 33.6483 48.464 33.6483 cv
48.3561 33.6483 48.264 33.6101 48.1876 33.5337 cv
48.112 33.4573 48.0742 33.3656 48.0742 33.2585 cv
48.0742 33.1485 48.112 33.056 48.1876 32.9811 cv
48.264 32.9062 48.3561 32.8688 48.464 32.8688 cv
cp
f
49.7421 33.6483 mo
49.7421 33.518 li
50.0461 33.5135 50.3292 33.4427 50.5913 33.3057 cv
50.8533 33.1687 51.1064 32.9294 51.3505 32.588 cv
51.5954 32.2458 51.7657 31.8703 51.8616 31.4615 cv
51.4939 31.6973 51.1618 31.8153 50.8653 31.8153 cv
50.5306 31.8153 50.2438 31.6861 50.005 31.4278 cv
49.7661 31.1694 49.6467 30.8261 49.6467 30.3978 cv
49.6467 29.9807 49.7661 29.6097 50.005 29.2847 cv
50.2925 28.8894 50.668 28.6917 51.1315 28.6917 cv
51.5224 28.6917 51.8571 28.853 52.1356 29.1758 cv
52.4771 29.5764 52.6478 30.0702 52.6478 30.6573 cv
52.6478 31.1859 52.5179 31.679 52.2581 32.1365 cv
51.9982 32.594 51.6369 32.9736 51.1742 33.2754 cv
50.7968 33.524 50.3861 33.6483 49.9421 33.6483 cv
49.7421 33.6483 li
cp
51.9177 31.2009 mo
51.9597 30.8969 51.9806 30.6535 51.9806 30.4708 cv
51.9806 30.2439 51.9421 29.9991 51.8649 29.7362 cv
51.7878 29.4727 51.6785 29.2709 51.537 29.1308 cv
51.3955 28.9901 51.2345 28.9197 51.054 28.9197 cv
50.8458 28.9197 50.6631 29.0133 50.5059 29.2005 cv
50.3494 29.3877 50.2712 29.6662 50.2712 30.0361 cv
50.2712 30.5296 50.3756 30.9156 50.5845 31.1941 cv
50.7365 31.3956 50.9237 31.4963 51.1461 31.4963 cv
51.2532 31.4963 51.3805 31.4704 51.528 31.4188 cv
51.6755 31.3671 51.8054 31.2945 51.9177 31.2009 cv
cp
f
53.7991 29.2566 mo
54.9571 28.6917 li
55.0728 28.6917 li
55.0728 32.7104 li
55.0728 32.977 55.084 33.1432 55.1065 33.2091 cv
55.1289 33.2743 55.175 33.3244 55.2446 33.3596 cv
55.315 33.3948 55.458 33.4147 55.6737 33.4192 cv
55.6737 33.5494 li
53.8833 33.5494 li
53.8833 33.4192 li
54.1079 33.4147 54.2528 33.3956 54.318 33.3619 cv
54.3839 33.3274 54.4295 33.2818 54.455 33.2248 cv
54.4812 33.1672 54.4943 32.9957 54.4943 32.7104 cv
54.4943 30.1417 li
54.4943 29.795 54.4827 29.5726 54.4595 29.4745 cv
54.443 29.3997 54.4131 29.3446 54.3696 29.3094 cv
54.3262 29.2742 54.2742 29.2566 54.2135 29.2566 cv
54.1267 29.2566 54.0061 29.293 53.8519 29.3656 cv
53.7991 29.2566 li
cp
f
59.6711 28.7894 mo
59.397 29.3869 li
57.965 29.3869 li
57.6527 30.0249 li
58.2727 30.1163 58.7643 30.3469 59.1274 30.7168 cv
59.4382 31.035 59.5936 31.4094 59.5936 31.84 cv
59.5936 32.0901 59.5427 32.3218 59.4408 32.5352 cv
59.3397 32.7479 59.2117 32.9291 59.0567 33.0788 cv
58.9024 33.2286 58.7306 33.3491 58.5411 33.4405 cv
58.2723 33.5693 57.996 33.6337 57.7122 33.6337 cv
57.4269 33.6337 57.2192 33.5854 57.0889 33.4888 cv
56.9593 33.3915 56.8946 33.284 56.8946 33.1664 cv
56.8946 33.1013 56.9215 33.0436 56.9754 32.9935 cv
57.0293 32.9426 57.0971 32.9171 57.1787 32.9171 cv
57.2401 32.9171 57.2937 32.9265 57.3393 32.9452 cv
57.385 32.9639 57.4625 33.0122 57.5718 33.0901 cv
57.7478 33.2114 57.9256 33.272 58.1054 33.272 cv
58.3794 33.272 58.6198 33.1687 58.8264 32.962 cv
59.0338 32.7546 59.1376 32.5023 59.1376 32.205 cv
59.1376 31.9175 59.0451 31.649 58.8601 31.3997 cv
58.6752 31.1503 58.4202 30.9579 58.0952 30.8224 cv
57.8399 30.7168 57.4925 30.6558 57.0529 30.6393 cv
57.965 28.7894 li
59.6711 28.7894 li
cp
f
34.8061 149.703 mo
34.8061 153.387 li
36.3089 154.034 li
36.6788 154.193 36.9551 154.272 37.1378 154.272 cv
37.2831 154.272 37.4103 154.204 37.5197 154.066 cv
37.629 153.928 37.7001 153.63 37.7331 153.172 cv
37.9937 153.172 li
37.9937 156.168 li
37.7331 156.168 li
37.6627 155.77 37.5713 155.512 37.459 155.396 cv
37.2344 155.157 36.7784 154.893 36.091 154.603 cv
28.2579 151.253 li
28.2579 151.008 li
36.1763 147.695 li
36.8128 147.428 37.2261 147.187 37.4163 146.969 cv
37.605 146.751 37.7106 146.448 37.7331 146.06 cv
37.9937 146.06 li
37.9937 149.816 li
37.7331 149.816 li
37.7151 149.437 37.6522 149.181 37.5444 149.047 cv
37.4366 148.914 37.3055 148.847 37.1513 148.847 cv
36.9446 148.847 36.6196 148.941 36.1763 149.128 cv
34.8061 149.703 li
cp
34.2872 149.899 mo
30.4391 151.514 li
34.2872 153.172 li
34.2872 149.899 li
cp
f
35.5496 139.988 mo
36.3972 140.16 37.0494 140.499 37.5062 141.006 cv
37.963 141.51 38.1913 142.07 38.1913 142.684 cv
38.1913 143.413 37.8851 144.049 37.2726 144.593 cv
36.6586 145.135 35.8297 145.406 34.7858 145.406 cv
33.775 145.406 32.9536 145.106 32.3216 144.505 cv
31.6896 143.903 31.3736 143.182 31.3736 142.34 cv
31.3736 141.708 31.5414 141.188 31.8768 140.781 cv
32.2108 140.374 32.5582 140.17 32.9191 140.17 cv
33.0958 140.17 33.2396 140.228 33.3504 140.343 cv
33.4597 140.457 33.5144 140.617 33.5144 140.824 cv
33.5144 141.099 33.4253 141.307 33.2471 141.448 cv
33.1497 141.528 32.9633 141.58 32.6877 141.605 cv
32.4107 141.631 32.1995 141.726 32.0543 141.891 cv
31.9135 142.054 31.8431 142.281 31.8431 142.571 cv
31.8431 143.039 32.0168 143.415 32.3643 143.701 cv
32.8225 144.08 33.4283 144.27 34.1816 144.27 cv
34.9498 144.27 35.6275 144.082 36.2145 143.706 cv
36.8016 143.328 37.0951 142.819 37.0951 142.178 cv
37.0951 141.719 36.9386 141.307 36.6256 140.943 cv
36.41 140.685 36.0191 140.434 35.453 140.19 cv
35.5496 139.988 li
cp
f
35.5496 133.607 mo
36.3972 133.779 37.0494 134.118 37.5062 134.625 cv
37.963 135.129 38.1913 135.689 38.1913 136.303 cv
38.1913 137.032 37.8851 137.668 37.2726 138.212 cv
36.6586 138.754 35.8297 139.025 34.7858 139.025 cv
33.775 139.025 32.9536 138.725 32.3216 138.124 cv
31.6896 137.522 31.3736 136.801 31.3736 135.959 cv
31.3736 135.327 31.5414 134.807 31.8768 134.4 cv
32.2108 133.993 32.5582 133.789 32.9191 133.789 cv
33.0958 133.789 33.2396 133.847 33.3504 133.962 cv
33.4597 134.076 33.5144 134.236 33.5144 134.443 cv
33.5144 134.718 33.4253 134.926 33.2471 135.067 cv
33.1497 135.146 32.9633 135.199 32.6877 135.224 cv
32.4107 135.25 32.1995 135.345 32.0543 135.51 cv
31.9135 135.673 31.8431 135.9 31.8431 136.19 cv
31.8431 136.658 32.0168 137.034 32.3643 137.32 cv
32.8225 137.699 33.4283 137.889 34.1816 137.889 cv
34.9498 137.889 35.6275 137.701 36.2145 137.325 cv
36.8016 136.947 37.0951 136.438 37.0951 135.797 cv
37.0951 135.337 36.9386 134.926 36.6256 134.562 cv
36.41 134.304 36.0191 134.053 35.453 133.809 cv
35.5496 133.607 li
cp
f
31.5623 127.051 mo
35.4598 127.051 li
36.204 127.051 36.6593 127.033 36.8255 126.999 cv
36.9918 126.963 37.1078 126.907 37.1737 126.831 cv
37.2381 126.753 37.2703 126.662 37.2703 126.559 cv
37.2703 126.413 37.2306 126.249 37.1513 126.067 cv
37.3961 125.968 li
38.1913 127.893 li
38.1913 128.208 li
36.8278 128.208 li
37.4268 128.76 37.8042 129.182 37.96 129.472 cv
38.1142 129.761 38.1913 130.068 38.1913 130.391 cv
38.1913 130.752 38.0873 131.065 37.8791 131.33 cv
37.6694 131.594 37.4014 131.777 37.0749 131.88 cv
36.7469 131.982 36.2834 132.033 35.6844 132.033 cv
32.8135 132.033 li
32.5095 132.033 32.2991 132.066 32.1823 132.132 cv
32.064 132.198 31.9734 132.295 31.9105 132.424 cv
31.8476 132.553 31.8184 132.786 31.8229 133.123 cv
31.5623 133.123 li
31.5623 130.87 li
35.8663 130.87 li
36.4654 130.87 36.8585 130.765 37.0457 130.557 cv
37.2329 130.348 37.3265 130.096 37.3265 129.802 cv
37.3265 129.6 37.2636 129.372 37.1378 129.117 cv
37.0105 128.863 36.7694 128.559 36.4145 128.208 cv
32.7709 128.208 li
32.4054 128.208 32.1583 128.274 32.0296 128.407 cv
31.9008 128.541 31.8319 128.819 31.8229 129.241 cv
31.5623 129.241 li
31.5623 127.051 li
cp
f
31.3736 123.616 mo
32.8203 123.616 li
31.8558 123.078 31.3736 122.527 31.3736 121.96 cv
31.3736 121.703 31.4522 121.49 31.6095 121.322 cv
31.7652 121.153 31.9464 121.069 32.1531 121.069 cv
32.3358 121.069 32.4908 121.13 32.6181 121.253 cv
32.7439 121.374 32.8068 121.519 32.8068 121.686 cv
32.8068 121.85 32.7259 122.033 32.5642 122.237 cv
32.4025 122.44 32.3216 122.592 32.3216 122.69 cv
32.3216 122.774 32.368 122.866 32.4609 122.965 cv
32.654 123.174 32.97 123.391 33.4088 123.616 cv
36.4908 123.616 li
36.8473 123.616 37.1168 123.572 37.2995 123.483 cv
37.4253 123.422 37.5302 123.314 37.614 123.16 cv
37.6979 123.006 37.7398 122.783 37.7398 122.493 cv
37.9937 122.493 li
37.9937 125.786 li
37.7398 125.786 li
37.7398 125.458 37.6889 125.215 37.5871 125.056 cv
37.5122 124.939 37.3924 124.857 37.2276 124.811 cv
37.1483 124.787 36.9214 124.775 36.547 124.775 cv
34.0558 124.775 li
33.307 124.775 32.8615 124.791 32.7192 124.822 cv
32.5754 124.852 32.4713 124.908 32.4069 124.991 cv
32.3411 125.072 32.3081 125.173 32.3081 125.294 cv
32.3081 125.439 32.3433 125.603 32.4137 125.786 cv
32.1598 125.856 li
31.3736 123.913 li
31.3736 123.616 li
cp
f
37.0659 117.067 mo
37.5766 117.728 37.8716 118.142 37.951 118.31 cv
38.0678 118.563 38.1262 118.832 38.1262 119.118 cv
38.1262 119.562 37.9742 119.928 37.6702 120.217 cv
37.3662 120.504 36.9663 120.648 36.4706 120.648 cv
36.1561 120.648 35.8843 120.578 35.6552 120.437 cv
35.3377 120.245 35.0389 119.912 34.7589 119.437 cv
34.4773 118.962 34.1351 118.173 33.7323 117.067 cv
33.4807 117.067 li
32.8382 117.067 32.398 117.169 32.1598 117.373 cv
31.9217 117.576 31.8027 117.872 31.8027 118.26 cv
31.8027 118.555 31.882 118.789 32.0408 118.963 cv
32.1995 119.141 32.3822 119.231 32.5889 119.231 cv
32.9955 119.215 li
33.2111 119.215 33.3774 119.27 33.4942 119.381 cv
33.611 119.49 33.6694 119.634 33.6694 119.812 cv
33.6694 119.986 33.6088 120.128 33.4874 120.237 cv
33.3646 120.346 33.1984 120.401 32.9888 120.401 cv
32.5859 120.401 32.216 120.195 31.8791 119.783 cv
31.5421 119.371 31.3736 118.794 31.3736 118.051 cv
31.3736 117.479 31.4695 117.011 31.6612 116.647 cv
31.8064 116.37 32.0333 116.166 32.3418 116.036 cv
32.544 115.951 32.9558 115.908 33.5773 115.908 cv
35.7608 115.908 li
36.3748 115.908 36.7507 115.897 36.8884 115.874 cv
37.0262 115.851 37.1183 115.812 37.1647 115.758 cv
37.2112 115.704 37.2344 115.642 37.2344 115.571 cv
37.2344 115.496 37.2187 115.431 37.1872 115.376 cv
37.1258 115.277 36.9543 115.087 36.6728 114.807 cv
37.0659 114.807 li
37.7683 115.332 38.1194 115.833 38.1194 116.31 cv
38.1194 116.539 38.0401 116.722 37.8813 116.858 cv
37.7226 116.993 37.4508 117.063 37.0659 117.067 cv
cp
36.6099 117.067 mo
34.1614 117.067 li
34.4414 117.774 34.6398 118.23 34.7566 118.435 cv
34.9633 118.805 35.179 119.07 35.4036 119.231 cv
35.6282 119.389 35.8738 119.469 36.1404 119.469 cv
36.4774 119.469 36.7574 119.368 36.9805 119.168 cv
37.2022 118.965 37.313 118.733 37.313 118.471 cv
37.313 118.116 37.0786 117.648 36.6099 117.067 cv
cp
f
35.5496 108.869 mo
36.3972 109.041 37.0494 109.38 37.5062 109.886 cv
37.963 110.391 38.1913 110.951 38.1913 111.565 cv
38.1913 112.294 37.8851 112.93 37.2726 113.474 cv
36.6586 114.016 35.8297 114.287 34.7858 114.287 cv
33.775 114.287 32.9536 113.987 32.3216 113.386 cv
31.6896 112.784 31.3736 112.062 31.3736 111.221 cv
31.3736 110.589 31.5414 110.069 31.8768 109.662 cv
32.2108 109.255 32.5582 109.051 32.9191 109.051 cv
33.0958 109.051 33.2396 109.109 33.3504 109.224 cv
33.4597 109.338 33.5144 109.498 33.5144 109.705 cv
33.5144 109.98 33.4253 110.188 33.2471 110.329 cv
33.1497 110.408 32.9633 110.461 32.6877 110.486 cv
32.4107 110.512 32.1995 110.607 32.0543 110.772 cv
31.9135 110.935 31.8431 111.162 31.8431 111.452 cv
31.8431 111.919 32.0168 112.296 32.3643 112.582 cv
32.8225 112.961 33.4283 113.15 34.1816 113.15 cv
34.9498 113.15 35.6275 112.963 36.2145 112.587 cv
36.8016 112.209 37.0951 111.7 37.0951 111.059 cv
37.0951 110.599 36.9386 110.188 36.6256 109.824 cv
36.41 109.566 36.0191 109.315 35.453 109.071 cv
35.5496 108.869 li
cp
f
31.5623 108.313 mo
31.5623 105.316 li
31.8229 105.316 li
31.8229 105.464 li
31.8229 105.674 31.8686 105.832 31.9599 105.938 cv
32.0513 106.043 32.1651 106.095 32.3014 106.095 cv
32.4826 106.095 32.7349 106.018 33.0584 105.864 cv
36.3021 104.298 li
32.7506 102.858 li
32.5575 102.779 32.3673 102.739 32.1801 102.739 cv
32.0962 102.739 32.0333 102.756 31.9914 102.789 cv
31.9405 102.826 31.9 102.885 31.8701 102.964 cv
31.8386 103.043 31.8229 103.184 31.8229 103.386 cv
31.5623 103.386 li
31.5623 101.293 li
31.8229 101.293 li
31.8424 101.466 31.8806 101.601 31.9375 101.695 cv
31.9929 101.788 32.0977 101.89 32.2519 102.003 cv
32.3163 102.045 32.4961 102.124 32.7911 102.241 cv
39.2089 104.86 li
39.8304 105.113 40.2999 105.445 40.6174 105.855 cv
40.9364 106.264 41.0959 106.658 41.0959 107.037 cv
41.0959 107.312 41.0165 107.539 40.8578 107.717 cv
40.699 107.896 40.5163 107.985 40.3097 107.985 cv
40.1135 107.985 39.9555 107.92 39.8357 107.791 cv
39.7174 107.663 39.6582 107.486 39.6582 107.261 cv
39.6582 107.107 39.7091 106.896 39.811 106.628 cv
39.8814 106.441 39.9165 106.324 39.9165 106.277 cv
39.9165 106.137 39.8439 105.984 39.6986 105.819 cv
39.5549 105.653 39.2741 105.485 38.8563 105.316 cv
37.7398 104.86 li
32.8899 107.169 li
32.7446 107.24 32.5642 107.352 32.3485 107.506 cv
32.1853 107.623 32.076 107.719 32.0206 107.794 cv
31.9457 107.902 31.8798 108.075 31.8229 108.313 cv
31.5623 108.313 li
cp
f
grestore
1.07825 lw
2 lc
83.4092 187.62 mo
123.925 146.908 li
164.442 60.958 li
204.958 92.6207 li
245.474 92.6207 li
285.99 133.338 li
326.507 122.028 li
367.023 169.528 li
407.539 103.93 li
448.055 85.8382 li
.906981 .71841 0 0 cmyk
@
gsave
65.1769 31.0537 mo
466.288 31.0537 li
466.288 226.434 li
65.1769 226.434 li
cp
eclp
83.4092 189.776 mo
83.9811 189.776 84.5297 189.549 84.9341 189.145 cv
85.3385 188.74 85.5657 188.192 85.5657 187.62 cv
85.5657 187.048 85.3385 186.499 84.9341 186.095 cv
84.5297 185.691 83.9811 185.463 83.4092 185.463 cv
82.8373 185.463 82.2887 185.691 81.8843 186.095 cv
81.4799 186.499 81.2527 187.048 81.2527 187.62 cv
81.2527 188.192 81.4799 188.74 81.8843 189.145 cv
82.2887 189.549 82.8373 189.776 83.4092 189.776 cv
cp
f
.718836 lw
0 lc
83.4092 189.776 mo
83.9811 189.776 84.5297 189.549 84.9341 189.145 cv
85.3385 188.74 85.5657 188.192 85.5657 187.62 cv
85.5657 187.048 85.3385 186.499 84.9341 186.095 cv
84.5297 185.691 83.9811 185.463 83.4092 185.463 cv
82.8373 185.463 82.2887 185.691 81.8843 186.095 cv
81.4799 186.499 81.2527 187.048 81.2527 187.62 cv
81.2527 188.192 81.4799 188.74 81.8843 189.145 cv
82.2887 189.549 82.8373 189.776 83.4092 189.776 cv
cp
@
123.925 149.065 mo
124.497 149.065 125.046 148.838 125.45 148.433 cv
125.855 148.029 126.082 147.48 126.082 146.908 cv
126.082 146.336 125.855 145.788 125.45 145.383 cv
125.046 144.979 124.497 144.752 123.925 144.752 cv
123.354 144.752 122.805 144.979 122.401 145.383 cv
121.996 145.788 121.769 146.336 121.769 146.908 cv
121.769 147.48 121.996 148.029 122.401 148.433 cv
122.805 148.838 123.354 149.065 123.925 149.065 cv
cp
f
123.925 149.065 mo
124.497 149.065 125.046 148.838 125.45 148.433 cv
125.855 148.029 126.082 147.48 126.082 146.908 cv
126.082 146.336 125.855 145.788 125.45 145.383 cv
125.046 144.979 124.497 144.752 123.925 144.752 cv
123.354 144.752 122.805 144.979 122.401 145.383 cv
121.996 145.788 121.769 146.336 121.769 146.908 cv
121.769 147.48 121.996 148.029 122.401 148.433 cv
122.805 148.838 123.354 149.065 123.925 149.065 cv
cp
@
164.442 63.1145 mo
165.014 63.1145 165.562 62.8873 165.967 62.4829 cv
166.371 62.0785 166.598 61.5299 166.598 60.958 cv
166.598 60.3861 166.371 59.8375 165.967 59.4331 cv
165.562 59.0287 165.014 58.8015 164.442 58.8015 cv
163.87 58.8015 163.321 59.0287 162.917 59.4331 cv
162.512 59.8375 162.285 60.3861 162.285 60.958 cv
162.285 61.5299 162.512 62.0785 162.917 62.4829 cv
163.321 62.8873 163.87 63.1145 164.442 63.1145 cv
cp
f
164.442 63.1145 mo
165.014 63.1145 165.562 62.8873 165.967 62.4829 cv
166.371 62.0785 166.598 61.5299 166.598 60.958 cv
166.598 60.3861 166.371 59.8375 165.967 59.4331 cv
165.562 59.0287 165.014 58.8015 164.442 58.8015 cv
163.87 58.8015 163.321 59.0287 162.917 59.4331 cv
162.512 59.8375 162.285 60.3861 162.285 60.958 cv
162.285 61.5299 162.512 62.0785 162.917 62.4829 cv
163.321 62.8873 163.87 63.1145 164.442 63.1145 cv
cp
@
204.958 94.7772 mo
205.53 94.7772 206.078 94.55 206.483 94.1456 cv
206.887 93.7412 207.114 93.1926 207.114 92.6207 cv
207.114 92.0488 206.887 91.5002 206.483 91.0958 cv
206.078 90.6914 205.53 90.4642 204.958 90.4642 cv
204.386 90.4642 203.837 90.6914 203.433 91.0958 cv
203.029 91.5002 202.801 92.0488 202.801 92.6207 cv
202.801 93.1926 203.029 93.7412 203.433 94.1456 cv
203.837 94.55 204.386 94.7772 204.958 94.7772 cv
cp
f
204.958 94.7772 mo
205.53 94.7772 206.078 94.55 206.483 94.1456 cv
206.887 93.7412 207.114 93.1926 207.114 92.6207 cv
207.114 92.0488 206.887 91.5002 206.483 91.0958 cv
206.078 90.6914 205.53 90.4642 204.958 90.4642 cv
204.386 90.4642 203.837 90.6914 203.433 91.0958 cv
203.029 91.5002 202.801 92.0488 202.801 92.6207 cv
202.801 93.1926 203.029 93.7412 203.433 94.1456 cv
203.837 94.55 204.386 94.7772 204.958 94.7772 cv
cp
@
245.474 94.7772 mo
246.046 94.7772 246.595 94.55 246.999 94.1456 cv
247.403 93.7412 247.631 93.1926 247.631 92.6207 cv
247.631 92.0488 247.403 91.5002 246.999 91.0958 cv
246.595 90.6914 246.046 90.4642 245.474 90.4642 cv
244.902 90.4642 244.354 90.6914 243.949 91.0958 cv
243.545 91.5002 243.318 92.0488 243.318 92.6207 cv
243.318 93.1926 243.545 93.7412 243.949 94.1456 cv
244.354 94.55 244.902 94.7772 245.474 94.7772 cv
cp
f
245.474 94.7772 mo
246.046 94.7772 246.595 94.55 246.999 94.1456 cv
247.403 93.7412 247.631 93.1926 247.631 92.6207 cv
247.631 92.0488 247.403 91.5002 246.999 91.0958 cv
246.595 90.6914 246.046 90.4642 245.474 90.4642 cv
244.902 90.4642 244.354 90.6914 243.949 91.0958 cv
243.545 91.5002 243.318 92.0488 243.318 92.6207 cv
243.318 93.1926 243.545 93.7412 243.949 94.1456 cv
244.354 94.55 244.902 94.7772 245.474 94.7772 cv
cp
@
285.99 135.494 mo
286.562 135.494 287.111 135.267 287.515 134.863 cv
287.92 134.458 288.147 133.91 288.147 133.338 cv
288.147 132.766 287.92 132.217 287.515 131.813 cv
287.111 131.409 286.562 131.181 285.99 131.181 cv
285.418 131.181 284.87 131.409 284.465 131.813 cv
284.061 132.217 283.834 132.766 283.834 133.338 cv
283.834 133.91 284.061 134.458 284.465 134.863 cv
284.87 135.267 285.418 135.494 285.99 135.494 cv
cp
f
285.99 135.494 mo
286.562 135.494 287.111 135.267 287.515 134.863 cv
287.92 134.458 288.147 133.91 288.147 133.338 cv
288.147 132.766 287.92 132.217 287.515 131.813 cv
287.111 131.409 286.562 131.181 285.99 131.181 cv
285.418 131.181 284.87 131.409 284.465 131.813 cv
284.061 132.217 283.834 132.766 283.834 133.338 cv
283.834 133.91 284.061 134.458 284.465 134.863 cv
284.87 135.267 285.418 135.494 285.99 135.494 cv
cp
@
326.507 124.185 mo
327.079 124.185 327.627 123.957 328.031 123.553 cv
328.436 123.149 328.663 122.6 328.663 122.028 cv
328.663 121.456 328.436 120.908 328.031 120.503 cv
327.627 120.099 327.079 119.872 326.507 119.872 cv
325.935 119.872 325.386 120.099 324.982 120.503 cv
324.577 120.908 324.35 121.456 324.35 122.028 cv
324.35 122.6 324.577 123.149 324.982 123.553 cv
325.386 123.957 325.935 124.185 326.507 124.185 cv
cp
f
326.507 124.185 mo
327.079 124.185 327.627 123.957 328.031 123.553 cv
328.436 123.149 328.663 122.6 328.663 122.028 cv
328.663 121.456 328.436 120.908 328.031 120.503 cv
327.627 120.099 327.079 119.872 326.507 119.872 cv
325.935 119.872 325.386 120.099 324.982 120.503 cv
324.577 120.908 324.35 121.456 324.35 122.028 cv
324.35 122.6 324.577 123.149 324.982 123.553 cv
325.386 123.957 325.935 124.185 326.507 124.185 cv
cp
@
367.023 171.684 mo
367.595 171.684 368.143 171.457 368.548 171.053 cv
368.952 170.648 369.179 170.1 369.179 169.528 cv
369.179 168.956 368.952 168.407 368.548 168.003 cv
368.143 167.598 367.595 167.371 367.023 167.371 cv
366.451 167.371 365.902 167.598 365.498 168.003 cv
365.094 168.407 364.866 168.956 364.866 169.528 cv
364.866 170.1 365.094 170.648 365.498 171.053 cv
365.902 171.457 366.451 171.684 367.023 171.684 cv
cp
f
367.023 171.684 mo
367.595 171.684 368.143 171.457 368.548 171.053 cv
368.952 170.648 369.179 170.1 369.179 169.528 cv
369.179 168.956 368.952 168.407 368.548 168.003 cv
368.143 167.598 367.595 167.371 367.023 167.371 cv
366.451 167.371 365.902 167.598 365.498 168.003 cv
365.094 168.407 364.866 168.956 364.866 169.528 cv
364.866 170.1 365.094 170.648 365.498 171.053 cv
365.902 171.457 366.451 171.684 367.023 171.684 cv
cp
@
407.539 106.087 mo
408.111 106.087 408.66 105.86 409.064 105.455 cv
409.468 105.051 409.696 104.502 409.696 103.93 cv
409.696 103.358 409.468 102.81 409.064 102.406 cv
408.66 102.001 408.111 101.774 407.539 101.774 cv
406.967 101.774 406.419 102.001 406.014 102.406 cv
405.61 102.81 405.383 103.358 405.383 103.93 cv
405.383 104.502 405.61 105.051 406.014 105.455 cv
406.419 105.86 406.967 106.087 407.539 106.087 cv
cp
f
407.539 106.087 mo
408.111 106.087 408.66 105.86 409.064 105.455 cv
409.468 105.051 409.696 104.502 409.696 103.93 cv
409.696 103.358 409.468 102.81 409.064 102.406 cv
408.66 102.001 408.111 101.774 407.539 101.774 cv
406.967 101.774 406.419 102.001 406.014 102.406 cv
405.61 102.81 405.383 103.358 405.383 103.93 cv
405.383 104.502 405.61 105.051 406.014 105.455 cv
406.419 105.86 406.967 106.087 407.539 106.087 cv
cp
@
448.055 87.9947 mo
448.627 87.9947 449.176 87.7675 449.58 87.3631 cv
449.985 86.9587 450.212 86.4101 450.212 85.8382 cv
450.212 85.2663 449.985 84.7177 449.58 84.3133 cv
449.176 83.9089 448.627 83.6817 448.055 83.6817 cv
447.483 83.6817 446.935 83.9089 446.53 84.3133 cv
446.126 84.7177 445.899 85.2663 445.899 85.8382 cv
445.899 86.4101 446.126 86.9587 446.53 87.3631 cv
446.935 87.7675 447.483 87.9947 448.055 87.9947 cv
cp
f
448.055 87.9947 mo
448.627 87.9947 449.176 87.7675 449.58 87.3631 cv
449.985 86.9587 450.212 86.4101 450.212 85.8382 cv
450.212 85.2663 449.985 84.7177 449.58 84.3133 cv
449.176 83.9089 448.627 83.6817 448.055 83.6817 cv
447.483 83.6817 446.935 83.9089 446.53 84.3133 cv
446.126 84.7177 445.899 85.2663 445.899 85.8382 cv
445.899 86.4101 446.126 86.9587 446.53 87.3631 cv
446.935 87.7675 447.483 87.9947 448.055 87.9947 cv
cp
@
grestore
gsave
.48162 0 mo
518.044 0 li
518.044 258.781 li
.48162 258.781 li
cp
eclp
.575069 lw
0 lj
65.1769 226.433 mo
65.1769 31.0537 li
.92874 .878447 .889433 .798764 cmyk
@
466.288 226.433 mo
466.288 31.0537 li
@
65.1769 226.433 mo
466.288 226.433 li
@
65.1769 31.0537 mo
466.288 31.0537 li
@
159.513 23.5531 mo
155.829 23.5531 li
155.182 25.0559 li
155.023 25.4258 154.944 25.7021 154.944 25.8849 cv
154.944 26.0301 155.013 26.1574 155.151 26.2667 cv
155.288 26.3761 155.586 26.4472 156.045 26.4801 cv
156.045 26.7407 li
153.048 26.7407 li
153.048 26.4801 li
153.446 26.4098 153.704 26.3184 153.821 26.2061 cv
154.059 25.9814 154.323 25.5254 154.614 24.838 cv
157.963 17.005 li
158.208 17.005 li
161.521 24.9234 li
161.788 25.5599 162.03 25.9732 162.247 26.1634 cv
162.465 26.3521 162.769 26.4577 163.157 26.4801 cv
163.157 26.7407 li
159.401 26.7407 li
159.401 26.4801 li
159.78 26.4622 160.036 26.3993 160.169 26.2914 cv
160.302 26.1836 160.369 26.0526 160.369 25.8983 cv
160.369 25.6917 160.275 25.3667 160.088 24.9234 cv
159.513 23.5531 li
cp
159.318 23.0342 mo
157.702 19.1862 li
156.045 23.0342 li
159.318 23.0342 li
cp
f
169.228 24.2967 mo
169.056 25.1443 168.717 25.7965 168.211 26.2533 cv
167.706 26.71 167.147 26.9384 166.533 26.9384 cv
165.803 26.9384 165.167 26.6321 164.623 26.0196 cv
164.081 25.4056 163.81 24.5767 163.81 23.5329 cv
163.81 22.522 164.11 21.7006 164.711 21.0686 cv
165.313 20.4367 166.035 20.1207 166.876 20.1207 cv
167.508 20.1207 168.028 20.2884 168.435 20.6239 cv
168.843 20.9578 169.046 21.3053 169.046 21.6662 cv
169.046 21.8429 168.989 21.9867 168.873 22.0975 cv
168.759 22.2068 168.599 22.2615 168.393 22.2615 cv
168.117 22.2615 167.909 22.1724 167.768 21.9942 cv
167.689 21.8968 167.636 21.7104 167.611 21.4348 cv
167.585 21.1578 167.49 20.9466 167.326 20.8013 cv
167.162 20.6606 166.935 20.5902 166.645 20.5902 cv
166.178 20.5902 165.801 20.7639 165.515 21.1113 cv
165.136 21.5696 164.947 22.1754 164.947 22.9286 cv
164.947 23.6969 165.135 24.3745 165.51 24.9616 cv
165.888 25.5486 166.397 25.8422 167.038 25.8422 cv
167.498 25.8422 167.91 25.6857 168.273 25.3727 cv
168.531 25.157 168.782 24.7662 169.026 24.2001 cv
169.228 24.2967 li
cp
f
175.609 24.2967 mo
175.437 25.1443 175.098 25.7965 174.592 26.2533 cv
174.087 26.71 173.528 26.9384 172.914 26.9384 cv
172.184 26.9384 171.548 26.6321 171.004 26.0196 cv
170.462 25.4056 170.191 24.5767 170.191 23.5329 cv
170.191 22.522 170.491 21.7006 171.092 21.0686 cv
171.694 20.4367 172.416 20.1207 173.257 20.1207 cv
173.889 20.1207 174.409 20.2884 174.816 20.6239 cv
175.224 20.9578 175.427 21.3053 175.427 21.6662 cv
175.427 21.8429 175.37 21.9867 175.254 22.0975 cv
175.141 22.2068 174.98 22.2615 174.774 22.2615 cv
174.498 22.2615 174.29 22.1724 174.149 21.9942 cv
174.07 21.8968 174.017 21.7104 173.992 21.4348 cv
173.966 21.1578 173.871 20.9466 173.707 20.8013 cv
173.543 20.6606 173.316 20.5902 173.026 20.5902 cv
172.559 20.5902 172.182 20.7639 171.896 21.1113 cv
171.517 21.5696 171.328 22.1754 171.328 22.9286 cv
171.328 23.6969 171.516 24.3745 171.892 24.9616 cv
172.269 25.5486 172.778 25.8422 173.419 25.8422 cv
173.879 25.8422 174.291 25.6857 174.655 25.3727 cv
174.912 25.157 175.163 24.7662 175.407 24.2001 cv
175.609 24.2967 li
cp
f
182.166 20.3094 mo
182.166 24.2068 li
182.166 24.9511 182.183 25.4064 182.217 25.5726 cv
182.253 25.7388 182.309 25.8549 182.386 25.9208 cv
182.464 25.9852 182.554 26.0174 182.658 26.0174 cv
182.803 26.0174 182.967 25.9777 183.149 25.8983 cv
183.248 26.1432 li
181.323 26.9384 li
181.009 26.9384 li
181.009 25.5749 li
180.456 26.1739 180.035 26.5513 179.744 26.707 cv
179.455 26.8613 179.149 26.9384 178.825 26.9384 cv
178.464 26.9384 178.151 26.8343 177.886 26.6262 cv
177.623 26.4165 177.439 26.1484 177.336 25.822 cv
177.234 25.494 177.183 25.0305 177.183 24.4315 cv
177.183 21.5606 li
177.183 21.2566 177.15 21.0462 177.084 20.9294 cv
177.018 20.8111 176.921 20.7205 176.792 20.6576 cv
176.663 20.5947 176.431 20.5655 176.094 20.57 cv
176.094 20.3094 li
178.347 20.3094 li
178.347 24.6134 li
178.347 25.2124 178.451 25.6056 178.659 25.7928 cv
178.869 25.9799 179.12 26.0735 179.414 26.0735 cv
179.616 26.0735 179.844 26.0106 180.099 25.8849 cv
180.354 25.7576 180.657 25.5164 181.009 25.1615 cv
181.009 21.5179 li
181.009 21.1525 180.942 20.9054 180.809 20.7766 cv
180.675 20.6478 180.398 20.5789 179.975 20.57 cv
179.975 20.3094 li
182.166 20.3094 li
cp
f
185.6 20.1207 mo
185.6 21.5673 li
186.138 20.6029 186.69 20.1207 187.256 20.1207 cv
187.513 20.1207 187.726 20.1993 187.894 20.3566 cv
188.063 20.5123 188.148 20.6935 188.148 20.9002 cv
188.148 21.0829 188.086 21.2379 187.963 21.3652 cv
187.842 21.491 187.698 21.5539 187.53 21.5539 cv
187.367 21.5539 187.183 21.473 186.98 21.3113 cv
186.776 21.1495 186.625 21.0686 186.526 21.0686 cv
186.442 21.0686 186.351 21.1151 186.252 21.2079 cv
186.042 21.4011 185.825 21.7171 185.6 22.1559 cv
185.6 25.2379 li
185.6 25.5943 185.644 25.8639 185.733 26.0466 cv
185.794 26.1724 185.902 26.2772 186.056 26.3611 cv
186.211 26.4449 186.433 26.4869 186.723 26.4869 cv
186.723 26.7407 li
183.43 26.7407 li
183.43 26.4869 li
183.758 26.4869 184.002 26.436 184.16 26.3341 cv
184.277 26.2592 184.359 26.1394 184.405 25.9747 cv
184.429 25.8953 184.441 25.6685 184.441 25.2941 cv
184.441 22.8028 li
184.441 22.0541 184.425 21.6085 184.394 21.4663 cv
184.364 21.3225 184.308 21.2184 184.225 21.154 cv
184.145 21.0881 184.044 21.0552 183.922 21.0552 cv
183.777 21.0552 183.613 21.0904 183.43 21.1607 cv
183.361 20.9069 li
185.304 20.1207 li
185.6 20.1207 li
cp
f
192.149 25.813 mo
191.489 26.3236 191.074 26.6187 190.907 26.698 cv
190.654 26.8148 190.384 26.8733 190.098 26.8733 cv
189.655 26.8733 189.289 26.7212 189 26.4172 cv
188.712 26.1132 188.568 25.7134 188.568 25.2177 cv
188.568 24.9032 188.639 24.6314 188.779 24.4023 cv
188.971 24.0848 189.304 23.786 189.779 23.506 cv
190.254 23.2244 191.044 22.8822 192.149 22.4794 cv
192.149 22.2278 li
192.149 21.5853 192.047 21.145 191.843 20.9069 cv
191.64 20.6688 191.344 20.5497 190.956 20.5497 cv
190.661 20.5497 190.427 20.6291 190.253 20.7879 cv
190.075 20.9466 189.986 21.1293 189.986 21.336 cv
190.001 21.7426 li
190.001 21.9582 189.946 22.1244 189.835 22.2412 cv
189.726 22.3581 189.582 22.4165 189.404 22.4165 cv
189.23 22.4165 189.089 22.3558 188.979 22.2345 cv
188.87 22.1117 188.815 21.9455 188.815 21.7358 cv
188.815 21.333 189.021 20.9631 189.433 20.6261 cv
189.845 20.2892 190.422 20.1207 191.165 20.1207 cv
191.737 20.1207 192.205 20.2165 192.569 20.4082 cv
192.846 20.5535 193.05 20.7804 193.18 21.0889 cv
193.265 21.291 193.308 21.7029 193.308 22.3244 cv
193.308 24.5078 li
193.308 25.1218 193.319 25.4977 193.342 25.6355 cv
193.366 25.7733 193.405 25.8654 193.459 25.9118 cv
193.513 25.9582 193.575 25.9814 193.645 25.9814 cv
193.72 25.9814 193.785 25.9657 193.84 25.9343 cv
193.939 25.8729 194.129 25.7014 194.409 25.4199 cv
194.409 25.813 li
193.885 26.5153 193.384 26.8665 192.906 26.8665 cv
192.677 26.8665 192.494 26.7871 192.358 26.6284 cv
192.223 26.4697 192.153 26.1978 192.149 25.813 cv
cp
192.149 25.357 mo
192.149 22.9084 li
191.442 23.1885 190.986 23.3869 190.781 23.5037 cv
190.411 23.7104 190.146 23.926 189.986 24.1507 cv
189.827 24.3753 189.748 24.6209 189.748 24.8875 cv
189.748 25.2244 189.848 25.5045 190.049 25.7276 cv
190.251 25.9492 190.483 26.0601 190.745 26.0601 cv
191.1 26.0601 191.568 25.8257 192.149 25.357 cv
cp
f
200.347 24.2967 mo
200.175 25.1443 199.836 25.7965 199.33 26.2533 cv
198.825 26.71 198.266 26.9384 197.652 26.9384 cv
196.922 26.9384 196.286 26.6321 195.742 26.0196 cv
195.2 25.4056 194.929 24.5767 194.929 23.5329 cv
194.929 22.522 195.229 21.7006 195.83 21.0686 cv
196.432 20.4367 197.154 20.1207 197.995 20.1207 cv
198.627 20.1207 199.147 20.2884 199.554 20.6239 cv
199.962 20.9578 200.165 21.3053 200.165 21.6662 cv
200.165 21.8429 200.108 21.9867 199.992 22.0975 cv
199.879 22.2068 199.718 22.2615 199.512 22.2615 cv
199.236 22.2615 199.028 22.1724 198.887 21.9942 cv
198.808 21.8968 198.755 21.7104 198.73 21.4348 cv
198.705 21.1578 198.609 20.9466 198.445 20.8013 cv
198.281 20.6606 198.055 20.5902 197.764 20.5902 cv
197.297 20.5902 196.92 20.7639 196.634 21.1113 cv
196.255 21.5696 196.066 22.1754 196.066 22.9286 cv
196.066 23.6969 196.254 24.3745 196.63 24.9616 cv
197.007 25.5486 197.516 25.8422 198.157 25.8422 cv
198.617 25.8422 199.029 25.6857 199.393 25.3727 cv
199.65 25.157 199.901 24.7662 200.145 24.2001 cv
200.347 24.2967 li
cp
f
200.904 20.3094 mo
203.9 20.3094 li
203.9 20.57 li
203.752 20.57 li
203.542 20.57 203.384 20.6156 203.278 20.707 cv
203.173 20.7983 203.121 20.9121 203.121 21.0484 cv
203.121 21.2296 203.198 21.482 203.352 21.8055 cv
204.918 25.0492 li
206.358 21.4977 li
206.437 21.3045 206.477 21.1143 206.477 20.9271 cv
206.477 20.8433 206.46 20.7804 206.427 20.7384 cv
206.39 20.6875 206.332 20.6471 206.252 20.6171 cv
206.173 20.5857 206.032 20.57 205.83 20.57 cv
205.83 20.3094 li
207.923 20.3094 li
207.923 20.57 li
207.75 20.5894 207.616 20.6276 207.521 20.6845 cv
207.429 20.7399 207.326 20.8448 207.214 20.999 cv
207.172 21.0634 207.092 21.2431 206.976 21.5381 cv
204.356 27.956 li
204.103 28.5775 203.771 29.047 203.361 29.3645 cv
202.952 29.6835 202.558 29.8429 202.18 29.8429 cv
201.904 29.8429 201.677 29.7636 201.499 29.6048 cv
201.321 29.4461 201.232 29.2634 201.232 29.0567 cv
201.232 28.8605 201.296 28.7025 201.425 28.5827 cv
201.554 28.4644 201.73 28.4053 201.955 28.4053 cv
202.109 28.4053 202.32 28.4562 202.588 28.558 cv
202.776 28.6284 202.892 28.6636 202.939 28.6636 cv
203.08 28.6636 203.232 28.591 203.397 28.4457 cv
203.563 28.3019 203.731 28.0211 203.9 27.6033 cv
204.356 26.4869 li
202.047 21.637 li
201.977 21.4917 201.864 21.3113 201.71 21.0956 cv
201.593 20.9324 201.497 20.823 201.423 20.7676 cv
201.315 20.6928 201.142 20.6269 200.904 20.57 cv
200.904 20.3094 li
cp
f
211.72 20.3094 mo
214.746 20.3094 li
214.746 20.57 li
214.55 20.57 li
214.368 20.57 214.228 20.6149 214.132 20.7047 cv
214.037 20.7931 213.989 20.9121 213.989 21.0619 cv
213.989 21.2251 214.037 21.4191 214.135 21.6437 cv
215.631 25.1952 li
217.134 21.5112 li
217.24 21.2491 217.293 21.0499 217.293 20.9136 cv
217.293 20.8478 217.274 20.7938 217.237 20.7519 cv
217.186 20.6815 217.121 20.6336 217.042 20.6081 cv
216.962 20.5827 216.8 20.57 216.556 20.57 cv
216.556 20.3094 li
218.657 20.3094 li
218.657 20.57 li
218.413 20.5894 218.244 20.6388 218.151 20.7182 cv
217.986 20.8575 217.839 21.0911 217.709 21.4191 cv
215.426 26.9384 li
215.139 26.9384 li
212.843 21.5112 li
212.74 21.2581 212.641 21.0769 212.547 20.9676 cv
212.454 20.8567 212.335 20.7639 212.192 20.689 cv
212.111 20.6471 211.953 20.6074 211.72 20.57 cv
211.72 20.3094 li
cp
f
223.394 20.1207 mo
223.394 22.3109 li
223.163 22.3109 li
222.985 21.6235 222.756 21.1555 222.478 20.9069 cv
222.199 20.6583 221.845 20.534 221.415 20.534 cv
221.087 20.534 220.822 20.6209 220.62 20.7946 cv
220.419 20.9683 220.319 21.16 220.319 21.3697 cv
220.319 21.6317 220.394 21.8564 220.544 22.0436 cv
220.689 22.2353 220.984 22.4389 221.429 22.6546 cv
222.453 23.1533 li
223.404 23.616 223.879 24.227 223.879 24.9863 cv
223.879 25.5704 223.658 26.0421 223.215 26.4015 cv
222.773 26.7594 222.278 26.9384 221.73 26.9384 cv
221.337 26.9384 220.888 26.868 220.382 26.7272 cv
220.228 26.6793 220.102 26.6554 220.004 26.6554 cv
219.897 26.6554 219.812 26.7168 219.751 26.8396 cv
219.519 26.8396 li
219.519 24.5438 li
219.751 24.5438 li
219.882 25.1982 220.133 25.6917 220.501 26.0241 cv
220.871 26.3566 221.286 26.5228 221.745 26.5228 cv
222.067 26.5228 222.33 26.4285 222.534 26.2398 cv
222.738 26.0496 222.839 25.8212 222.839 25.5546 cv
222.839 25.2312 222.726 24.9594 222.498 24.7392 cv
222.272 24.5191 221.82 24.2405 221.141 23.9036 cv
220.463 23.5666 220.018 23.2626 219.807 22.9915 cv
219.597 22.725 219.492 22.388 219.492 21.9807 cv
219.492 21.452 219.673 21.0102 220.036 20.6553 cv
220.398 20.2989 220.867 20.1207 221.442 20.1207 cv
221.695 20.1207 222.002 20.1746 222.363 20.2824 cv
222.601 20.3528 222.76 20.388 222.839 20.388 cv
222.914 20.388 222.973 20.3715 223.015 20.3386 cv
223.057 20.3056 223.106 20.233 223.163 20.1207 cv
223.394 20.1207 li
cp
f
226.181 25.3794 mo
226.401 25.3794 226.586 25.4558 226.736 25.6085 cv
226.886 25.7598 226.961 25.9433 226.961 26.1589 cv
226.961 26.3731 226.884 26.5565 226.731 26.7093 cv
226.58 26.862 226.397 26.9384 226.181 26.9384 cv
225.965 26.9384 225.781 26.862 225.628 26.7093 cv
225.477 26.5565 225.402 26.3731 225.402 26.1589 cv
225.402 25.9388 225.477 25.7538 225.628 25.6041 cv
225.781 25.4543 225.965 25.3794 226.181 25.3794 cv
cp
f
237.456 26.7407 mo
233.776 18.7302 li
233.776 25.0919 li
233.776 25.6759 233.84 26.0406 233.967 26.1859 cv
234.139 26.382 234.413 26.4801 234.787 26.4801 cv
235.124 26.4801 li
235.124 26.7407 li
231.811 26.7407 li
231.811 26.4801 li
232.147 26.4801 li
232.55 26.4801 232.836 26.3588 233.006 26.1162 cv
233.107 25.9665 233.158 25.625 233.158 25.0919 cv
233.158 18.8717 li
233.158 18.4509 233.112 18.1469 233.019 17.9597 cv
232.953 17.8234 232.833 17.7096 232.657 17.6182 cv
232.482 17.5269 232.2 17.4812 231.811 17.4812 cv
231.811 17.2206 li
234.506 17.2206 li
237.961 24.6696 li
241.358 17.2206 li
244.053 17.2206 li
244.053 17.4812 li
243.723 17.4812 li
243.317 17.4812 243.03 17.6033 242.86 17.8474 cv
242.757 17.9971 242.705 18.3386 242.705 18.8717 cv
242.705 25.0919 li
242.705 25.6759 242.771 26.0406 242.903 26.1859 cv
243.075 26.382 243.349 26.4801 243.723 26.4801 cv
244.053 26.4801 li
244.053 26.7407 li
240.01 26.7407 li
240.01 26.4801 li
240.347 26.4801 li
240.754 26.4801 241.04 26.3588 241.205 26.1162 cv
241.307 25.9665 241.358 25.625 241.358 25.0919 cv
241.358 18.7302 li
237.687 26.7407 li
237.456 26.7407 li
cp
f
250.441 20.3094 mo
250.441 24.2068 li
250.441 24.9511 250.458 25.4064 250.493 25.5726 cv
250.529 25.7388 250.585 25.8549 250.661 25.9208 cv
250.739 25.9852 250.83 26.0174 250.933 26.0174 cv
251.078 26.0174 251.242 25.9777 251.425 25.8983 cv
251.524 26.1432 li
249.599 26.9384 li
249.284 26.9384 li
249.284 25.5749 li
248.732 26.1739 248.31 26.5513 248.019 26.707 cv
247.73 26.8613 247.424 26.9384 247.101 26.9384 cv
246.74 26.9384 246.427 26.8343 246.162 26.6262 cv
245.898 26.4165 245.715 26.1484 245.611 25.822 cv
245.509 25.494 245.459 25.0305 245.459 24.4315 cv
245.459 21.5606 li
245.459 21.2566 245.426 21.0462 245.36 20.9294 cv
245.294 20.8111 245.196 20.7205 245.068 20.6576 cv
244.939 20.5947 244.706 20.5655 244.369 20.57 cv
244.369 20.3094 li
246.622 20.3094 li
246.622 24.6134 li
246.622 25.2124 246.726 25.6056 246.934 25.7928 cv
247.144 25.9799 247.396 26.0735 247.689 26.0735 cv
247.891 26.0735 248.12 26.0106 248.374 25.8849 cv
248.629 25.7576 248.932 25.5164 249.284 25.1615 cv
249.284 21.5179 li
249.284 21.1525 249.217 20.9054 249.084 20.7766 cv
248.951 20.6478 248.673 20.5789 248.251 20.57 cv
248.251 20.3094 li
250.441 20.3094 li
cp
f
254.204 16.7579 mo
254.204 25.2873 li
254.204 25.6902 254.233 25.9575 254.291 26.0893 cv
254.351 26.2196 254.442 26.3184 254.563 26.3858 cv
254.684 26.4532 254.911 26.4869 255.244 26.4869 cv
255.244 26.7407 li
252.092 26.7407 li
252.092 26.4869 li
252.387 26.4869 252.588 26.4569 252.694 26.397 cv
252.802 26.3356 252.887 26.2353 252.948 26.096 cv
253.009 25.9552 253.04 25.6857 253.04 25.2873 cv
253.04 19.4468 li
253.04 18.7219 253.024 18.2764 252.991 18.1102 cv
252.958 17.944 252.905 17.8309 252.831 17.771 cv
252.759 17.7096 252.667 17.6789 252.555 17.6789 cv
252.434 17.6789 252.279 17.7163 252.092 17.7912 cv
251.973 17.5441 li
253.889 16.7579 li
254.204 16.7579 li
cp
f
257.854 18.1978 mo
257.854 20.3094 li
259.357 20.3094 li
259.357 20.8013 li
257.854 20.8013 li
257.854 24.9706 li
257.854 25.3884 257.914 25.67 258.034 25.8152 cv
258.154 25.959 258.307 26.0309 258.494 26.0309 cv
258.649 26.0309 258.798 25.9829 258.944 25.8871 cv
259.089 25.7913 259.201 25.6497 259.281 25.4625 cv
259.555 25.4625 li
259.39 25.9208 259.158 26.266 258.858 26.4981 cv
258.559 26.7302 258.25 26.8463 257.933 26.8463 cv
257.717 26.8463 257.506 26.7864 257.299 26.6666 cv
257.094 26.5468 256.942 26.3761 256.843 26.1544 cv
256.746 25.9328 256.697 25.5898 256.697 25.1256 cv
256.697 20.8013 li
255.68 20.8013 li
255.68 20.57 li
255.936 20.4666 256.199 20.2922 256.468 20.0466 cv
256.738 19.8009 256.977 19.5097 257.187 19.1727 cv
257.295 18.9945 257.445 18.6695 257.636 18.1978 cv
257.854 18.1978 li
cp
f
261.617 16.7579 mo
261.813 16.7579 261.98 16.8275 262.118 16.9668 cv
262.257 17.1046 262.327 17.2715 262.327 17.4677 cv
262.327 17.6639 262.257 17.8324 262.118 17.9732 cv
261.98 18.1139 261.813 18.1843 261.617 18.1843 cv
261.421 18.1843 261.253 18.1139 261.112 17.9732 cv
260.971 17.8324 260.901 17.6639 260.901 17.4677 cv
260.901 17.2715 260.97 17.1046 261.107 16.9668 cv
261.247 16.8275 261.417 16.7579 261.617 16.7579 cv
cp
262.201 20.1207 mo
262.201 25.2873 li
262.201 25.6902 262.23 25.9582 262.289 26.0915 cv
262.347 26.2248 262.433 26.3244 262.547 26.3903 cv
262.663 26.4547 262.872 26.4869 263.176 26.4869 cv
263.176 26.7407 li
260.051 26.7407 li
260.051 26.4869 li
260.366 26.4869 260.576 26.4569 260.683 26.397 cv
260.791 26.3356 260.876 26.2353 260.939 26.096 cv
261.003 25.9552 261.035 25.6857 261.035 25.2873 cv
261.035 22.8096 li
261.035 22.1117 261.014 21.6602 260.973 21.455 cv
260.94 21.3053 260.888 21.2012 260.817 21.1428 cv
260.747 21.0844 260.651 21.0552 260.53 21.0552 cv
260.398 21.0552 260.239 21.0904 260.051 21.1607 cv
259.955 20.9069 li
261.891 20.1207 li
262.201 20.1207 li
cp
f
264.109 22.9848 mo
267.739 22.9848 li
267.739 24.0451 li
264.109 24.0451 li
264.109 22.9848 li
cp
f
270.673 21.4887 mo
271.142 21.0215 271.418 20.7527 271.502 20.6823 cv
271.712 20.5041 271.938 20.3663 272.18 20.2689 cv
272.425 20.1701 272.666 20.1207 272.906 20.1207 cv
273.309 20.1207 273.655 20.2382 273.944 20.4734 cv
274.234 20.707 274.429 21.0454 274.528 21.4887 cv
275.01 20.9271 275.417 20.5587 275.748 20.3835 cv
276.08 20.2083 276.422 20.1207 276.774 20.1207 cv
277.116 20.1207 277.418 20.2083 277.682 20.3835 cv
277.947 20.5587 278.157 20.8455 278.311 21.2439 cv
278.414 21.5149 278.466 21.941 278.466 22.522 cv
278.466 25.2873 li
278.466 25.6902 278.496 25.9665 278.556 26.1162 cv
278.604 26.2196 278.69 26.3072 278.816 26.3791 cv
278.942 26.4509 279.148 26.4869 279.434 26.4869 cv
279.434 26.7407 li
276.262 26.7407 li
276.262 26.4869 li
276.395 26.4869 li
276.67 26.4869 276.885 26.4337 277.039 26.3274 cv
277.147 26.2525 277.225 26.1327 277.273 25.968 cv
277.291 25.8886 277.3 25.6617 277.3 25.2873 cv
277.3 22.522 li
277.3 21.9979 277.237 21.628 277.111 21.4123 cv
276.929 21.1128 276.636 20.9631 276.233 20.9631 cv
275.984 20.9631 275.735 21.0252 275.485 21.1495 cv
275.235 21.2738 274.932 21.5044 274.577 21.8414 cv
274.562 21.9178 li
274.577 22.2188 li
274.577 25.2873 li
274.577 25.7276 274.601 26.0017 274.649 26.1095 cv
274.699 26.2173 274.791 26.3072 274.926 26.3791 cv
275.062 26.4509 275.294 26.4869 275.622 26.4869 cv
275.622 26.7407 li
272.371 26.7407 li
272.371 26.4869 li
272.728 26.4869 272.973 26.4449 273.106 26.3611 cv
273.239 26.2772 273.331 26.1507 273.382 25.9814 cv
273.406 25.9021 273.418 25.6707 273.418 25.2873 cv
273.418 22.522 li
273.418 21.9979 273.341 21.6213 273.187 21.3921 cv
272.98 21.0926 272.692 20.9429 272.322 20.9429 cv
272.07 20.9429 271.82 21.0102 271.572 21.145 cv
271.184 21.3517 270.884 21.5838 270.673 21.8414 cv
270.673 25.2873 li
270.673 25.7081 270.702 25.9822 270.761 26.1095 cv
270.819 26.2353 270.905 26.3296 271.019 26.3925 cv
271.134 26.4554 271.368 26.4869 271.72 26.4869 cv
271.72 26.7407 li
268.539 26.7407 li
268.539 26.4869 li
268.834 26.4869 269.04 26.4554 269.157 26.3925 cv
269.274 26.3296 269.362 26.2293 269.422 26.0915 cv
269.483 25.9537 269.514 25.6857 269.514 25.2873 cv
269.514 22.8298 li
269.514 22.1229 269.493 21.6669 269.451 21.4618 cv
269.418 21.3075 269.366 21.2012 269.296 21.1428 cv
269.227 21.0844 269.131 21.0552 269.009 21.0552 cv
268.878 21.0552 268.722 21.0904 268.539 21.1607 cv
268.434 20.9069 li
270.372 20.1207 li
270.673 20.1207 li
270.673 21.4887 li
cp
f
283.091 20.1207 mo
284.065 20.1207 284.846 20.4906 285.437 21.2304 cv
285.937 21.8624 286.187 22.5879 286.187 23.4071 cv
286.187 23.9822 286.048 24.5647 285.771 25.1548 cv
285.496 25.7433 285.116 26.1881 284.632 26.4891 cv
284.149 26.7886 283.609 26.9384 283.015 26.9384 cv
282.046 26.9384 281.276 26.552 280.706 25.7793 cv
280.223 25.1278 279.982 24.3978 279.982 23.5891 cv
279.982 22.999 280.128 22.4127 280.42 21.8302 cv
280.712 21.2476 281.097 20.8171 281.575 20.5385 cv
282.053 20.26 282.558 20.1207 283.091 20.1207 cv
cp
282.873 20.5767 mo
282.626 20.5767 282.377 20.6508 282.125 20.7991 cv
281.875 20.9458 281.673 21.2042 281.519 21.5741 cv
281.365 21.944 281.287 22.4187 281.287 22.9983 cv
281.287 23.9343 281.473 24.7422 281.845 25.4221 cv
282.217 26.1005 282.708 26.4397 283.316 26.4397 cv
283.77 26.4397 284.144 26.2525 284.439 25.8781 cv
284.734 25.5037 284.882 24.8598 284.882 23.9462 cv
284.882 22.8051 284.636 21.9065 284.145 21.2506 cv
283.812 20.8013 283.389 20.5767 282.873 20.5767 cv
cp
f
291.677 26.0174 mo
291.364 26.3454 291.058 26.5812 290.758 26.725 cv
290.459 26.8673 290.135 26.9384 289.788 26.9384 cv
289.087 26.9384 288.474 26.6449 287.95 26.0578 cv
287.426 25.4693 287.164 24.7137 287.164 23.7912 cv
287.164 22.8702 287.454 22.0271 288.033 21.2618 cv
288.614 20.4966 289.361 20.1139 290.273 20.1139 cv
290.839 20.1139 291.307 20.2944 291.677 20.6553 cv
291.677 19.467 li
291.677 18.7332 291.659 18.2824 291.623 18.1147 cv
291.589 17.9455 291.534 17.8309 291.459 17.771 cv
291.384 17.7096 291.291 17.6789 291.178 17.6789 cv
291.057 17.6789 290.895 17.7163 290.693 17.7912 cv
290.603 17.5441 li
292.519 16.7579 li
292.836 16.7579 li
292.836 24.1933 li
292.836 24.9466 292.853 25.4064 292.888 25.5726 cv
292.922 25.7388 292.978 25.8549 293.056 25.9208 cv
293.134 25.9852 293.224 26.0174 293.326 26.0174 cv
293.453 26.0174 293.622 25.9777 293.831 25.8983 cv
293.91 26.1432 li
292 26.9384 li
291.677 26.9384 li
291.677 26.0174 li
cp
291.677 25.5254 mo
291.677 22.212 li
291.648 21.8946 291.564 21.6048 291.423 21.3427 cv
291.284 21.0806 291.098 20.8829 290.866 20.7497 cv
290.634 20.6164 290.408 20.5497 290.188 20.5497 cv
289.776 20.5497 289.409 20.7347 289.087 21.1046 cv
288.66 21.5913 288.447 22.3026 288.447 23.2386 cv
288.447 24.1836 288.653 24.9077 289.064 25.4109 cv
289.476 25.9141 289.935 26.1656 290.441 26.1656 cv
290.867 26.1656 291.279 25.9522 291.677 25.5254 cv
cp
f
297.967 25.813 mo
297.306 26.3236 296.892 26.6187 296.724 26.698 cv
296.471 26.8148 296.202 26.8733 295.916 26.8733 cv
295.473 26.8733 295.106 26.7212 294.817 26.4172 cv
294.53 26.1132 294.386 25.7134 294.386 25.2177 cv
294.386 24.9032 294.456 24.6314 294.597 24.4023 cv
294.789 24.0848 295.122 23.786 295.597 23.506 cv
296.072 23.2244 296.861 22.8822 297.967 22.4794 cv
297.967 22.2278 li
297.967 21.5853 297.865 21.145 297.661 20.9069 cv
297.458 20.6688 297.162 20.5497 296.774 20.5497 cv
296.479 20.5497 296.245 20.6291 296.071 20.7879 cv
295.893 20.9466 295.803 21.1293 295.803 21.336 cv
295.819 21.7426 li
295.819 21.9582 295.764 22.1244 295.653 22.2412 cv
295.544 22.3581 295.4 22.4165 295.222 22.4165 cv
295.048 22.4165 294.906 22.3558 294.797 22.2345 cv
294.688 22.1117 294.633 21.9455 294.633 21.7358 cv
294.633 21.333 294.839 20.9631 295.251 20.6261 cv
295.663 20.2892 296.24 20.1207 296.983 20.1207 cv
297.555 20.1207 298.023 20.2165 298.387 20.4082 cv
298.664 20.5535 298.867 20.7804 298.998 21.0889 cv
299.083 21.291 299.126 21.7029 299.126 22.3244 cv
299.126 24.5078 li
299.126 25.1218 299.137 25.4977 299.16 25.6355 cv
299.184 25.7733 299.222 25.8654 299.276 25.9118 cv
299.33 25.9582 299.392 25.9814 299.463 25.9814 cv
299.538 25.9814 299.603 25.9657 299.658 25.9343 cv
299.757 25.8729 299.947 25.7014 300.227 25.4199 cv
300.227 25.813 li
299.702 26.5153 299.201 26.8665 298.724 26.8665 cv
298.495 26.8665 298.312 26.7871 298.176 26.6284 cv
298.041 26.4697 297.971 26.1978 297.967 25.813 cv
cp
297.967 25.357 mo
297.967 22.9084 li
297.26 23.1885 296.804 23.3869 296.599 23.5037 cv
296.229 23.7104 295.964 23.926 295.803 24.1507 cv
295.645 24.3753 295.565 24.6209 295.565 24.8875 cv
295.565 25.2244 295.666 25.5045 295.866 25.7276 cv
296.069 25.9492 296.301 26.0601 296.563 26.0601 cv
296.918 26.0601 297.386 25.8257 297.967 25.357 cv
cp
f
302.915 16.7579 mo
302.915 25.2873 li
302.915 25.6902 302.944 25.9575 303.002 26.0893 cv
303.062 26.2196 303.153 26.3184 303.274 26.3858 cv
303.395 26.4532 303.622 26.4869 303.955 26.4869 cv
303.955 26.7407 li
300.803 26.7407 li
300.803 26.4869 li
301.098 26.4869 301.299 26.4569 301.405 26.397 cv
301.513 26.3356 301.598 26.2353 301.659 26.096 cv
301.72 25.9552 301.751 25.6857 301.751 25.2873 cv
301.751 19.4468 li
301.751 18.7219 301.735 18.2764 301.702 18.1102 cv
301.669 17.944 301.616 17.8309 301.542 17.771 cv
301.47 17.7096 301.378 17.6789 301.266 17.6789 cv
301.145 17.6789 300.99 17.7163 300.803 17.7912 cv
300.684 17.5441 li
302.6 16.7579 li
302.915 16.7579 li
cp
f
310.793 22.2839 mo
310.793 25.0559 li
310.793 25.655 310.858 26.0271 310.988 26.1724 cv
311.167 26.3776 311.435 26.4801 311.795 26.4801 cv
312.161 26.4801 li
312.161 26.7407 li
308.082 26.7407 li
308.082 26.4801 li
308.441 26.4801 li
308.842 26.4801 309.13 26.3491 309.304 26.087 cv
309.398 25.9418 309.445 25.5981 309.445 25.0559 cv
309.445 18.9054 li
309.445 18.3064 309.381 17.935 309.254 17.7912 cv
309.071 17.5845 308.8 17.4812 308.441 17.4812 cv
308.082 17.4812 li
308.082 17.2206 li
311.57 17.2206 li
312.422 17.2206 313.094 17.309 313.585 17.4857 cv
314.076 17.6609 314.49 17.9567 314.827 18.373 cv
315.164 18.7893 315.333 19.2828 315.333 19.8534 cv
315.333 20.6306 315.077 21.2626 314.565 21.7493 cv
314.052 22.236 313.328 22.4794 312.392 22.4794 cv
312.163 22.4794 311.915 22.4629 311.649 22.4299 cv
311.382 22.397 311.097 22.3483 310.793 22.2839 cv
cp
310.793 21.8818 mo
311.04 21.9298 311.259 21.9657 311.451 21.9897 cv
311.643 22.0121 311.807 22.0234 311.943 22.0234 cv
312.43 22.0234 312.85 21.8354 313.203 21.4595 cv
313.557 21.0821 313.733 20.5939 313.733 19.9949 cv
313.733 19.5831 313.649 19.2004 313.48 18.847 cv
313.312 18.4936 313.073 18.2292 312.763 18.054 cv
312.454 17.8788 312.104 17.7912 311.712 17.7912 cv
311.474 17.7912 311.167 17.8354 310.793 17.9237 cv
310.793 21.8818 li
cp
f
318.171 20.1207 mo
318.171 21.5673 li
318.708 20.6029 319.26 20.1207 319.826 20.1207 cv
320.084 20.1207 320.297 20.1993 320.464 20.3566 cv
320.634 20.5123 320.718 20.6935 320.718 20.9002 cv
320.718 21.0829 320.657 21.2379 320.534 21.3652 cv
320.413 21.491 320.268 21.5539 320.1 21.5539 cv
319.937 21.5539 319.754 21.473 319.55 21.3113 cv
319.346 21.1495 319.195 21.0686 319.096 21.0686 cv
319.012 21.0686 318.921 21.1151 318.822 21.2079 cv
318.613 21.4011 318.395 21.7171 318.171 22.1559 cv
318.171 25.2379 li
318.171 25.5943 318.215 25.8639 318.303 26.0466 cv
318.365 26.1724 318.473 26.2772 318.627 26.3611 cv
318.781 26.4449 319.003 26.4869 319.294 26.4869 cv
319.294 26.7407 li
316.001 26.7407 li
316.001 26.4869 li
316.329 26.4869 316.572 26.436 316.731 26.3341 cv
316.848 26.2592 316.929 26.1394 316.976 25.9747 cv
317 25.8953 317.012 25.6685 317.012 25.2941 cv
317.012 22.8028 li
317.012 22.0541 316.996 21.6085 316.965 21.4663 cv
316.935 21.3225 316.878 21.2184 316.796 21.154 cv
316.715 21.0881 316.614 21.0552 316.493 21.0552 cv
316.348 21.0552 316.184 21.0904 316.001 21.1607 cv
315.931 20.9069 li
317.874 20.1207 li
318.171 20.1207 li
cp
f
324.221 20.1207 mo
325.194 20.1207 325.976 20.4906 326.566 21.2304 cv
327.066 21.8624 327.316 22.5879 327.316 23.4071 cv
327.316 23.9822 327.178 24.5647 326.901 25.1548 cv
326.625 25.7433 326.246 26.1881 325.762 26.4891 cv
325.278 26.7886 324.739 26.9384 324.144 26.9384 cv
323.176 26.9384 322.406 26.552 321.835 25.7793 cv
321.353 25.1278 321.112 24.3978 321.112 23.5891 cv
321.112 22.999 321.258 22.4127 321.55 21.8302 cv
321.842 21.2476 322.227 20.8171 322.705 20.5385 cv
323.182 20.26 323.688 20.1207 324.221 20.1207 cv
cp
324.003 20.5767 mo
323.756 20.5767 323.507 20.6508 323.255 20.7991 cv
323.005 20.9458 322.803 21.2042 322.648 21.5741 cv
322.494 21.944 322.417 22.4187 322.417 22.9983 cv
322.417 23.9343 322.603 24.7422 322.974 25.4221 cv
323.347 26.1005 323.837 26.4397 324.445 26.4397 cv
324.899 26.4397 325.274 26.2525 325.569 25.8781 cv
325.864 25.5037 326.011 24.8598 326.011 23.9462 cv
326.011 22.8051 325.766 21.9065 325.274 21.2506 cv
324.942 20.8013 324.518 20.5767 324.003 20.5767 cv
cp
f
330.174 21.4887 mo
330.642 21.0215 330.919 20.7527 331.003 20.6823 cv
331.212 20.5041 331.438 20.3663 331.681 20.2689 cv
331.925 20.1701 332.167 20.1207 332.407 20.1207 cv
332.809 20.1207 333.155 20.2382 333.444 20.4734 cv
333.735 20.707 333.93 21.0454 334.028 21.4887 cv
334.511 20.9271 334.917 20.5587 335.248 20.3835 cv
335.581 20.2083 335.923 20.1207 336.275 20.1207 cv
336.616 20.1207 336.919 20.2083 337.182 20.3835 cv
337.447 20.5587 337.657 20.8455 337.811 21.2439 cv
337.915 21.5149 337.966 21.941 337.966 22.522 cv
337.966 25.2873 li
337.966 25.6902 337.996 25.9665 338.056 26.1162 cv
338.104 26.2196 338.191 26.3072 338.317 26.3791 cv
338.443 26.4509 338.648 26.4869 338.935 26.4869 cv
338.935 26.7407 li
335.763 26.7407 li
335.763 26.4869 li
335.895 26.4869 li
336.171 26.4869 336.386 26.4337 336.54 26.3274 cv
336.648 26.2525 336.726 26.1327 336.774 25.968 cv
336.792 25.8886 336.8 25.6617 336.8 25.2873 cv
336.8 22.522 li
336.8 21.9979 336.738 21.628 336.612 21.4123 cv
336.429 21.1128 336.136 20.9631 335.733 20.9631 cv
335.485 20.9631 335.236 21.0252 334.985 21.1495 cv
334.735 21.2738 334.433 21.5044 334.078 21.8414 cv
334.062 21.9178 li
334.078 22.2188 li
334.078 25.2873 li
334.078 25.7276 334.102 26.0017 334.15 26.1095 cv
334.199 26.2173 334.291 26.3072 334.426 26.3791 cv
334.562 26.4509 334.794 26.4869 335.122 26.4869 cv
335.122 26.7407 li
331.872 26.7407 li
331.872 26.4869 li
332.228 26.4869 332.473 26.4449 332.607 26.3611 cv
332.74 26.2772 332.832 26.1507 332.883 25.9814 cv
332.907 25.9021 332.919 25.6707 332.919 25.2873 cv
332.919 22.522 li
332.919 21.9979 332.842 21.6213 332.687 21.3921 cv
332.481 21.0926 332.192 20.9429 331.823 20.9429 cv
331.571 20.9429 331.321 21.0102 331.072 21.145 cv
330.684 21.3517 330.385 21.5838 330.174 21.8414 cv
330.174 25.2873 li
330.174 25.7081 330.203 25.9822 330.261 26.1095 cv
330.32 26.2353 330.406 26.3296 330.52 26.3925 cv
330.635 26.4554 330.869 26.4869 331.221 26.4869 cv
331.221 26.7407 li
328.04 26.7407 li
328.04 26.4869 li
328.335 26.4869 328.541 26.4554 328.657 26.3925 cv
328.774 26.3296 328.863 26.2293 328.922 26.0915 cv
328.984 25.9537 329.015 25.6857 329.015 25.2873 cv
329.015 22.8298 li
329.015 22.1229 328.994 21.6669 328.952 21.4618 cv
328.919 21.3075 328.867 21.2012 328.797 21.1428 cv
328.728 21.0844 328.632 21.0552 328.509 21.0552 cv
328.379 21.0552 328.222 21.0904 328.04 21.1607 cv
327.934 20.9069 li
329.873 20.1207 li
330.174 20.1207 li
330.174 21.4887 li
cp
f
338.984 20.9496 mo
340.963 20.1499 li
341.231 20.1499 li
341.231 21.6505 li
341.563 21.0844 341.896 20.6883 342.23 20.4621 cv
342.566 20.2345 342.918 20.1207 343.286 20.1207 cv
343.933 20.1207 344.471 20.3738 344.901 20.88 cv
345.43 21.497 345.694 22.3019 345.694 23.2948 cv
345.694 24.403 345.376 25.3203 344.739 26.0466 cv
344.215 26.6411 343.556 26.9384 342.76 26.9384 cv
342.414 26.9384 342.115 26.889 341.862 26.7901 cv
341.675 26.7197 341.464 26.579 341.231 26.3678 cv
341.231 28.3266 li
341.231 28.7669 341.258 29.0462 341.311 29.1645 cv
341.365 29.2843 341.459 29.3794 341.592 29.4498 cv
341.726 29.5202 341.967 29.5554 342.318 29.5554 cv
342.318 29.816 li
338.948 29.816 li
338.948 29.5554 li
339.124 29.5554 li
339.381 29.5599 339.601 29.5112 339.784 29.4094 cv
339.872 29.357 339.941 29.2731 339.991 29.1578 cv
340.04 29.044 340.065 28.7535 340.065 28.2862 cv
340.065 22.2053 li
340.065 21.789 340.046 21.5247 340.009 21.4123 cv
339.971 21.3 339.911 21.2162 339.829 21.1607 cv
339.748 21.1038 339.637 21.0754 339.496 21.0754 cv
339.384 21.0754 339.241 21.1083 339.067 21.1742 cv
338.984 20.9496 li
cp
341.231 22.066 mo
341.231 24.4652 li
341.231 24.9848 341.252 25.327 341.293 25.4917 cv
341.359 25.7628 341.52 26.0017 341.774 26.2083 cv
342.029 26.4135 342.351 26.5161 342.74 26.5161 cv
343.207 26.5161 343.586 26.3334 343.877 25.968 cv
344.256 25.4902 344.445 24.8186 344.445 23.953 cv
344.445 22.9706 344.23 22.215 343.8 21.6864 cv
343.501 21.321 343.145 21.1383 342.733 21.1383 cv
342.509 21.1383 342.286 21.1944 342.066 21.3068 cv
341.897 21.3906 341.618 21.6437 341.231 22.066 cv
cp
f
348.502 18.1978 mo
348.502 20.3094 li
350.005 20.3094 li
350.005 20.8013 li
348.502 20.8013 li
348.502 24.9706 li
348.502 25.3884 348.562 25.67 348.682 25.8152 cv
348.802 25.959 348.955 26.0309 349.142 26.0309 cv
349.297 26.0309 349.446 25.9829 349.592 25.8871 cv
349.737 25.7913 349.849 25.6497 349.928 25.4625 cv
350.203 25.4625 li
350.038 25.9208 349.806 26.266 349.506 26.4981 cv
349.207 26.7302 348.898 26.8463 348.581 26.8463 cv
348.365 26.8463 348.154 26.7864 347.947 26.6666 cv
347.742 26.5468 347.59 26.3761 347.491 26.1544 cv
347.394 25.9328 347.345 25.5898 347.345 25.1256 cv
347.345 20.8013 li
346.328 20.8013 li
346.328 20.57 li
346.584 20.4666 346.846 20.2922 347.116 20.0466 cv
347.386 19.8009 347.625 19.5097 347.835 19.1727 cv
347.943 18.9945 348.092 18.6695 348.284 18.1978 cv
348.502 18.1978 li
cp
f
360.365 17.005 mo
360.365 20.2959 li
360.107 20.2959 li
360.023 19.6639 359.872 19.1607 359.653 18.7863 cv
359.436 18.4119 359.126 18.1154 358.723 17.8968 cv
358.32 17.6766 357.904 17.5666 357.474 17.5666 cv
356.988 17.5666 356.585 17.7148 356.266 18.0113 cv
355.948 18.3079 355.79 18.6463 355.79 19.0267 cv
355.79 19.3157 355.89 19.5801 356.091 19.8197 cv
356.381 20.1701 357.072 20.6381 358.162 21.2236 cv
359.051 21.6999 359.659 22.066 359.984 22.3221 cv
360.309 22.5767 360.559 22.8777 360.734 23.2252 cv
360.911 23.5711 360.999 23.9335 360.999 24.3124 cv
360.999 25.0327 360.719 25.6542 360.159 26.1769 cv
359.6 26.698 358.881 26.9586 358 26.9586 cv
357.724 26.9586 357.465 26.9376 357.22 26.8957 cv
357.077 26.8718 356.776 26.7864 356.32 26.6396 cv
355.863 26.4914 355.574 26.4172 355.453 26.4172 cv
355.336 26.4172 355.243 26.4524 355.174 26.5228 cv
355.107 26.5932 355.057 26.7385 355.024 26.9586 cv
354.765 26.9586 li
354.765 23.6946 li
355.024 23.6946 li
355.146 24.3775 355.31 24.889 355.516 25.2289 cv
355.722 25.5674 356.037 25.8489 356.459 26.0735 cv
356.883 26.2982 357.348 26.4105 357.854 26.4105 cv
358.438 26.4105 358.899 26.2563 359.238 25.9478 cv
359.578 25.6392 359.748 25.2738 359.748 24.8515 cv
359.748 24.6179 359.683 24.382 359.554 24.1439 cv
359.427 23.9043 359.227 23.6819 358.955 23.4767 cv
358.772 23.336 358.273 23.038 357.459 22.5827 cv
356.645 22.1259 356.067 21.762 355.722 21.491 cv
355.379 21.2184 355.119 20.9189 354.94 20.5924 cv
354.762 20.2645 354.673 19.9035 354.673 19.5097 cv
354.673 18.8268 354.935 18.239 355.459 17.7463 cv
355.983 17.2521 356.651 17.005 357.461 17.005 cv
357.966 17.005 358.501 17.1285 359.067 17.3756 cv
359.329 17.4924 359.514 17.5508 359.622 17.5508 cv
359.743 17.5508 359.843 17.5149 359.921 17.443 cv
359.999 17.3696 360.061 17.2236 360.107 17.005 cv
360.365 17.005 li
cp
f
363.855 16.7579 mo
364.051 16.7579 364.218 16.8275 364.356 16.9668 cv
364.495 17.1046 364.565 17.2715 364.565 17.4677 cv
364.565 17.6639 364.495 17.8324 364.356 17.9732 cv
364.218 18.1139 364.051 18.1843 363.855 18.1843 cv
363.659 18.1843 363.49 18.1139 363.349 17.9732 cv
363.209 17.8324 363.138 17.6639 363.138 17.4677 cv
363.138 17.2715 363.207 17.1046 363.345 16.9668 cv
363.484 16.8275 363.654 16.7579 363.855 16.7579 cv
cp
364.439 20.1207 mo
364.439 25.2873 li
364.439 25.6902 364.468 25.9582 364.526 26.0915 cv
364.585 26.2248 364.671 26.3244 364.785 26.3903 cv
364.9 26.4547 365.11 26.4869 365.414 26.4869 cv
365.414 26.7407 li
362.289 26.7407 li
362.289 26.4869 li
362.604 26.4869 362.814 26.4569 362.92 26.397 cv
363.028 26.3356 363.114 26.2353 363.176 26.096 cv
363.241 25.9552 363.273 25.6857 363.273 25.2873 cv
363.273 22.8096 li
363.273 22.1117 363.252 21.6602 363.21 21.455 cv
363.177 21.3053 363.126 21.2012 363.055 21.1428 cv
362.985 21.0844 362.889 21.0552 362.768 21.0552 cv
362.636 21.0552 362.476 21.0904 362.289 21.1607 cv
362.193 20.9069 li
364.129 20.1207 li
364.439 20.1207 li
cp
f
371.803 24.7684 mo
371.724 26.7407 li
366.052 26.7407 li
366.052 26.4869 li
370.32 20.8013 li
368.215 20.8013 li
367.762 20.8013 367.464 20.8305 367.324 20.8889 cv
367.183 20.9473 367.068 21.0589 366.98 21.2236 cv
366.853 21.4573 366.78 21.747 366.762 22.093 cv
366.481 22.093 li
366.524 20.3094 li
371.915 20.3094 li
371.915 20.57 li
367.604 26.2712 li
369.95 26.2712 li
370.441 26.2712 370.774 26.23 370.949 26.1477 cv
371.124 26.0653 371.266 25.9215 371.374 25.7164 cv
371.449 25.5666 371.511 25.2506 371.562 24.7684 cv
371.803 24.7684 li
cp
f
373.675 22.7332 mo
373.671 23.6872 373.903 24.4359 374.372 24.9796 cv
374.839 25.5217 375.389 25.7928 376.021 25.7928 cv
376.441 25.7928 376.808 25.6774 377.119 25.4468 cv
377.431 25.2147 377.692 24.8178 377.903 24.2562 cv
378.119 24.3955 li
378.021 25.0365 377.736 25.6205 377.263 26.1477 cv
376.791 26.6748 376.2 26.9384 375.488 26.9384 cv
374.715 26.9384 374.054 26.6374 373.505 26.0354 cv
372.955 25.4333 372.68 24.6246 372.68 23.6093 cv
372.68 22.5101 372.962 21.6527 373.525 21.0372 cv
374.089 20.4217 374.797 20.1139 375.648 20.1139 cv
376.37 20.1139 376.962 20.3513 377.425 20.826 cv
377.887 21.3008 378.119 21.9365 378.119 22.7332 cv
373.675 22.7332 li
cp
373.675 22.3244 mo
376.652 22.3244 li
376.629 21.9125 376.581 21.6228 376.506 21.455 cv
376.389 21.1929 376.215 20.987 375.982 20.8373 cv
375.75 20.6875 375.508 20.6126 375.255 20.6126 cv
374.867 20.6126 374.519 20.7639 374.212 21.0664 cv
373.907 21.3674 373.728 21.7867 373.675 22.3244 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
